#+STARTIP: overview
* Disable things
#+BEGIN_SRC emacs-lisp
  ; (tool-bar-mode -1)
  ; (toggle-scroll-bar -1)
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (if (display-graphic-p)
      (progn
	(tool-bar-mode -1)
	(scroll-bar-mode -1)))

  (setq-default visible-bell t)
  (blink-cursor-mode 0)
  ;; Useless keys
  (global-unset-key (kbd "C-x C-b"))
  (global-unset-key (kbd "C-z")) ; Don't hit it and suspend it in terminal
#+END_SRC
* Scroll and Click
#+BEGIN_SRC emacs-lisp
  ; Click and scroll in terminal.
  (unless (display-graphic-p)
    ;; activate mouse-based scrolling
    (xterm-mouse-mode 1)
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))
  ;; Scroll better
  ;; ;; Vertical Scroll
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 100000)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  ;; Horizontal Scroll
  (setq hscroll-step 1)
  (setq hscroll-margin 1)

#+END_SRC
* Mac
** Handle copy and paste in OSX
#+BEGIN_SRC emacs-lisp
  (defun copy-from-osx ()
    "Handle copy/paste intelligently on osx."
    (let ((pbpaste (purecopy "/usr/bin/pbpaste")))
      (if (and (eq system-type 'darwin)
	       (file-exists-p pbpaste))
	  (let ((tramp-mode nil)
		(default-directory "~"))
	    (shell-command-to-string pbpaste)))))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	(process-send-string proc text)
	(process-send-eof proc))))

  (setq interprogram-cut-function 'paste-to-osx
	interprogram-paste-function 'copy-from-osx)
#+END_SRC

* Backup
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq auto-save-list-file-prefix "~/.saves/.saves-")
  (setq backup-by-copying t)
  (setq delete-old-versions t
    kept-new-versions 20
    kept-old-versions 10
    version-control t)
#+END_SRC

* Whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
  :ensure t
  :init
  (progn
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (add-hook 'latex-mode-hook 'whitespace-mode)
  (remove-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq whitespace-line-column nil)
  (setq show-trailing-whitespace t)
  (setq whitespace-style
	'(face
	  tabs trailing space-before-tab space-after-tab ; tabs spaces trailing space-before-tab space-after-tab
	  tab-mark))))
#+END_SRC
* Ivy/Helm
#+BEGIN_SRC emacs-lisp
      ;; (use-package ivy
      ;; :ensure t
      ;; :config
      ;; (ivy-mode 1)
      ;; (setq ivy-count-format "%d/%d ")
      ;; (setq enable-recursive-minibuffers t)
      ;; )

  ;; https://github.com/MatthewZMD/.emacs.d?tab=readme-ov-file#ivy-amx-counsel-swiper
  (use-package ivy
    :diminish
    :init
    (use-package amx :defer t)
    (use-package counsel :diminish :config (counsel-mode 1))
    (use-package swiper :defer t)
    (ivy-mode 1)
    :bind
    (("C-s" . swiper-isearch)
     ("C-z s" . counsel-rg)
     ("C-z b" . counsel-buffer-or-recentf)
     ("C-z C-b" . counsel-ibuffer)
     ("M-y" . counsel-yank-pop)
     (:map ivy-minibuffer-map
	 ("M-RET" . ivy-immediate-done))
     (:map counsel-find-file-map
	 ("C-~" . counsel-goto-local-home)))
    :custom
    ;; (ivy-use-virtual-buffers t)
    ;; (ivy-use-virtual-buffers nil)
    (ivy-height 10)
    (ivy-on-del-error-function nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    (ivy-count-format "%d/%d")
    (ivy-wrap t)
    :config
    (defun counsel-goto-local-home ()
	"Go to the $HOME of the local machine."
	(interactive)
      (ivy--cd "~/")))
#+END_SRC

helm-M-x only
#+BEGIN_SRC emacs-lisp
  (use-package helm
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'helm-M-x))

  ;; ; For search.
  ;; (use-package helm-swoop
  ;; :ensure t
  ;; :config
  ;; (global-set-key (kbd "C-s") 'helm-swoop)
  ;; ;; Save buffer when helm-multi-swoop-edit complete
  ;; (setq helm-multi-swoop-edit-save t)
  ;; ;; If this value is t, split window inside the current window
  ;; (setq helm-swoop-split-with-multiple-windows t))

#+END_SRC

* Undo tree
#+BEGIN_SRC emacs-lisp
    ;; (use-package undo-tree
    ;; :ensure t
    ;; :init
    ;; (global-undo-tree-mode)
    ;; (global-set-key (kbd "C-z") 'undo-tree-undo))

  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-diff t)
    (undo-tree-history-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))
    (undo-tree-visualizer-timestamps t))
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'company-mode)
  (remove-hook 'text-mode-hook 'company-mode)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3))

  ;; (defun my/python-mode-hook ()
  ;;   (add-to-list 'company-backends 'company-jedi))

  ;; (add-hook 'python-mode-hook 'my/python-mode-hook)
  ;; (use-package company-jedi
  ;;     :ensure t
  ;;     :config
  ;;     (add-hook 'python-mode-hook 'jedi:setup)
  ;;        )

  ;; (defun my/python-mode-hook ()
  ;;   (add-to-list 'company-backends 'company-jedi))

  ;; (add-hook 'python-mode-hook 'my/python-mode-hook)

#+END_SRC
* Spell check
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "/usr/local/bin/hunspell")
  (setq ispell-hunspell-dict-paths-alist
  '(("en_US" "/Applications/dict-en-20230701_lo/en_US.aff")))
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
  ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
  ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
  '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))

  (global-set-key (kbd "C-c o") 'ispell-word)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'latex-mode-hook 'flyspell-mode)
  ;; (setq ispell-program-name "/usr/local/bin/ispell")
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook (lambda () (linum-mode -1)))
  (electric-indent-mode -1)
  ; Make tab work in Org-mode code block.
  (setq org-src-tab-acts-natively t)
  ; Highlight code block.
  (setq org-src-fontify-natively t)
  (add-hook 'latex-mode-hook 'visual-line-mode)
  ; (add-hook 'latex-mode-hook 'linum-relative-mode)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python3")

  (setq python-shell-interpreter "python3")

  (use-package python-black
    :ensure t
    :config
    (add-hook 'python-mode-hook 'python-black-on-save-mode))

  (use-package py-isort
    :ensure t
    :config
    (add-hook 'before-save-hook 'py-isort-before-save))

    ;; (use-package elpy
    ;;   :ensure t
    ;;   :init
    ;;   (elpy-enable)
    ;;   (setq elpy-rpc-virtualenv-path 'current))

    ;; (use-package py-autopep8
    ;;   :ensure t
    ;;   :config
    ;;   (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
    ;;   (setq py-autopep8-options '("--max-line-length=80")))

    ;; (use-package virtualenvwrapper
    ;; :ensure t
    ;;   :config
    ;;   (venv-initialize-interactive-shells)
    ;;   (venv-initialize-eshell))
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
  ;; (use-package spacemacs-theme
  ;;   :defer t
  ;;   :init (load-theme 'spacemacs-light t))

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-feather-light t))
#+END_SRC
* Misc
** Font
#+BEGIN_SRC emacs-lisp
  ;; Input Mono, Monaco Style, Line Height 1.3 download from http://input.fontbureau.com/
  ;; (defvar font-list '(("Input" . 11) ("Hack" . 12) ("Consolas" . 12) ("Love LetterTW" . 12.5))
  ;;   "List of fonts and sizes.  The first one available will be used.")
#+END_SRC

** Recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :custom
  (recentf-auto-cleanup "05:00am")
  (recentf-max-saved-items 200)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "COMMIT_EDITMSG\\'")))

;; When buffer is closed, saves the cursor location
(save-place-mode 1)

;; Set history-length longer
(setq-default history-length 500)
#+END_SRC

** Crux
#+BEGIN_SRC emacs-lisp
  (use-package crux
  :bind
  (("C-a" . crux-move-beginning-of-line)
     ("C-x 4 t" . crux-transpose-windows)
     ("C-x K" . crux-kill-other-buffers)
     ("C-k" . crux-smart-kill-line))
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :bind
    (:map smartparens-mode-map
	  ("C-M-f" . sp-forward-sexp)
	  ("C-M-b" . sp-backward-sexp)
	  ("C-M-a" . sp-backward-down-sexp)
	  ("C-M-e" . sp-up-sexp)
	  ("C-M-w" . sp-copy-sexp)
	  ("C-M-k" . sp-change-enclosing)
	  ("M-k" . sp-kill-sexp)
	  ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
	  ("C-S-<backspace>" . sp-splice-sexp-killing-around)
	  ("C-]" . sp-select-next-thing-exchange))
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))
#+END_SRC

** Auto-reload init files
#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file))
  ;; (global-set-key (kbd "C-c C-l") 'reload-init-file)    ; Reload .emacs file
#+END_SRC
#+end_SRC
** Automatically switch focus to newly splitted buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+END_SRC
** Highlight current word
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'highlight-symbol-mode))
#+END_SRC

** Shell
#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/bin/zsh")

  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
** Column width
#+BEGIN_SRC emacs-lisp
  (setq-default display-fill-column-indicator-column 87) ; 88 linewidth
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'latex-mode-hook 'display-fill-column-indicator-mode)
#+END_SRC
** Paren match
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC
** Go to line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c g") 'goto-line)
#+END_SRC

** Highlight indent
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-auto-enabled nil))
  ;; (set-face-foreground 'highlight-indent-guides-character-face "#C0C0C0"))
#+END_SRC

** Don't put deleted words into pasteboard
#+BEGIN_SRC emacs-lisp
  (defun my-delete-word (arg)
    "Delete characters forward until encountering the end of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point))))

  (defun my-backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (my-delete-word (- arg)))

  ; bind them to emacs's default shortcut keys:
  (global-set-key (kbd "M-<DEL>") 'my-backward-delete-word)

#+END_SRC

** Prevent down-arrow from adding empty lines to the bottom of the buffer
#+BEGIN_SRC emacs-lisp
  (setq next-line-add-newlines nil)
#+END_SRC
** Hightlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode +1)
    ;; (require 'hl-line)
    ;; (add-hook 'prog-mode-hook 'hl-line-mode)
  (set-face-background hl-line-face "#DCDCDC")

  ;; highlight only a single virtual line
  (setq hl-line-range-function
	'(lambda()
	   (save-excursion
	     (cons
	      (progn
		(beginning-of-visual-line)
		(point))
	      (progn
		(beginning-of-visual-line 2)
		(point))))))
#+END_SRC

** Show line numbers
#+BEGIN_SRC emacs-lisp
  ;;  (global-linum-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;; Display column numbers in modeline
  (column-number-mode 1)
  ;; (setq linum-relative-current-symbol "")
#+END_SRC

** Deletes all the whitespace when you hit backspace or delete
#+BEGIN_SRC emacs-lisp
  ;; (use-package hungry-delete
  ;; :ensure t
  ;; :config
  ;; (global-hungry-delete-mode))
#+END_SRC
** Aggressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
  :ensure t
  :config
  (global-aggressive-indent-mode 1))
#+END_SRC
** PATH
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
  )
#+END_SRC
** Beacon mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1))
#+END_SRC
** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-c =") 'er/expand-region))
#+END_SRC
** Winner
#+BEGIN_SRC emacs-lisp
(use-package winner
  :ensure nil
  :custom
  (winner-boring-buffers
   '("*Completions*"
     "*Compile-Log*"
     "*inferior-lisp*"
     "*Fuzzy Completions*"
     "*Apropos*"
     "*Help*"
     "*cvs*"
     "*Buffer List*"
     "*Ibuffer*"
     "*esh command on file*"))
  :config
  (winner-mode 1))
#+END_SRC
** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("C-x C-o" . ace-window))
#+END_SRC
** UTF-8
#+BEGIN_SRC emacs-lisp
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** Small configs
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq use-dialog-box nil)

  ;; Move the backup fies to user-emacs-directory/.backup
  (setq backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))

  ;; Ask before killing emacs
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Automatically kill all active processes when closing Emacs
  (setq confirm-kill-processes nil)

  ;; Turn Off Cursor Alarms
  (setq ring-bell-function 'ignore)

  ;; Show Keystrokes in Progress Instantly
  (setq echo-keystrokes 0.1)

  ;; Don't Lock Files
  (setq-default create-lockfiles nil)

  ;; Better Compilation
  (setq-default compilation-always-kill t) ; kill compilation process before starting another

  (setq-default compilation-ask-about-save nil) ; save all buffers on `compile'

  (setq-default compilation-scroll-output t)

  ;; ad-handle-definition warnings are generated when functions are redefined with `defadvice',
  ;; they are not helpful.
  (setq ad-redefinition-action 'accept)

  ;; Move Custom-Set-Variables to Different File
  (setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
  (load custom-file 'noerror)

  ;; So Long mitigates slowness due to extremely long lines.
  ;; Currently available in Emacs master branch *only*!
  (when (fboundp 'global-so-long-mode)
    (global-so-long-mode))

  ;; Add a newline automatically at the end of the file upon save.
  (setq require-final-newline t)

  ;; Enable `erase-buffer' function
  (put 'erase-buffer 'disabled nil)

#+END_SRC
** Misc
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)

  ;; Adjust font size like web browsers
  (global-set-key (kbd "C-=") #'text-scale-increase)
  (global-set-key (kbd "C-+") #'text-scale-increase)
  (global-set-key (kbd "C--") #'text-scale-decrease)

  ;; Save all buffers.
  (defun save-all-buffers ()
    "Instead of `save-buffer', save all opened buffers by calling `save-some-buffers' with ARG t."
    (interactive)
    (save-some-buffers t))
  (global-set-key (kbd "C-x C-s") nil)
  (global-set-key (kbd "C-x C-s") #'save-all-buffers)

  ;; Stop ivy from displaying recentf files.
  (setq ivy-use-virtual-buffers nil)

  ;; Jump to visual line, not physical line
  (global-set-key (kbd "C-e") 'end-of-visual-line)
  (global-set-key (kbd "C-a") 'beginning-of-visual-line)

  ;; Visual line don't break the word
  (setq-default word-wrap t)

#+END_SRC
* Old
#+BEGIN_SRC emacs-lisp
; evil mode
;;(add-to-list 'load-path "~/.emacs.d/evil")
;; (require 'evil)
;;(evil-mode 1)
;; (evil-define-minor-mode-key 'motion 'visual-line-mode "j" 'evil-next-visual-line)
;; (evil-define-minor-mode-key 'motion 'visual-line-mode "k" 'evil-previous-visual-line)

;; Consider xx_xx in word
;; (add-hook 'prog-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))


; crux
;; (require 'crux)
;; (global-set-key (kbd "C-k") #'crux-smart-kill-line)

; helm.
;; (helm-mode -1)
;; (require 'helm)
;; (global-set-key (kbd "M-x") 'helm-M-x)
;; (global-set-key (kbd "C-x C-f") 'helm-find-files)
;; (with-eval-after-load 'helm
;;   (define-key helm-map (kbd "C-c p") 'ignore)
;;   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
;;   (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
;;   (define-key helm-map (kbd "C-z")  'helm-select-action))

;; For python, import path
;; (require 'exec-path-from-shell)
;; (exec-path-from-shell-copy-env "PATH")
;; (when (memq window-system '(mac ns x))
;;   (exec-path-from-shell-initialize))

; ace jump.
;; (autoload
;;   'ace-jump-mode
;;   "ace-jump-mode"
;;   "Emacs quick move minor mode"
;;   t)
;; (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;; (require 'multiple-cursors)
;; (global-set-key (kbd "C-c C-c") 'mc/edit-lines)

; projectile
;; (require 'projectile)
;; (projectile-mode 1)
;; (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
;; (setq projectile-auto-discover nil)
;; (setq projectile-sort-order 'recentf)
;; (setq projectile-completion-system 'ivy)
;; (setq projectile-file-exists-remote-cache-expire nil)

;; (defun comment-or-uncomment-region-or-line ()
;;     "Comments or uncomments the region or the current line if there's no active region."
;;     (interactive)
;;     (let (beg end)
;;         (if (region-active-p)
;;             (setq beg (region-beginning) end (region-end))
;;             (setq beg (line-beginning-position) end (line-end-position)))
;;         (comment-or-uncomment-region beg end)
;;         (next-line)))
;; (global-set-key (kbd "M-;") 'comment-or-uncomment-region-or-line)
#+END_SRC
