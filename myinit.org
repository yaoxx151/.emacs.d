#+STARTIP: overview
* Disable useless stuffs
#+BEGIN_SRC emacs-lisp
  ;; Define system.
  (defconst *sys/linux*
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst *sys/mac*
      (eq system-type 'darwin)
    "Are we running on a Mac system?")

    ;; Disable usless thing.
  (setq inhibit-startup-screen t)
  (setq initial-major-mode 'text-mode)
  (setq inhibit-startup-message t)
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
  (menu-bar-mode -1)
  (setq-default visible-bell t)
  (blink-cursor-mode 0)
  (setq ns-use-proxy-icon nil) ;; Icon of filetype.

  ;; Useless keys.
  (global-unset-key (kbd "C-z")) ; Don't hit it and suspend it in terminal.
  (global-unset-key (kbd "M-z"))
  (global-unset-key (kbd "M-m"))
  (global-unset-key (kbd "C-x C-z"))
  (global-unset-key (kbd "C-x m"))
  (global-unset-key (kbd "C-x C-u"))
  (global-unset-key (kbd "C-x C-l"))
#+END_SRC
* Keybinding
#+BEGIN_SRC emacs-lisp
  ; Map Mac's command key to Meta only in GUI. Do it in iTerm2 config.
  (if *sys/mac*
      (setq mac-command-modifier 'meta))
  ;; Make motion easier. Bound extra keys from Stevey's suggestions.
  (global-set-key (kbd "M-n") 'next-line)
  (global-set-key (kbd "M-p") 'previous-line)
  ;; Other keys.
  (global-set-key (kbd "C-x \\") 'sort-lines)
  (global-set-key (kbd "C-c g") 'goto-line)
  (global-set-key (kbd "C-x k") 'kill-this-buffer) ;; Don't ask.
  ;; Stevey's suggestion.
  (global-set-key (kbd "C-x t") 'beginning-of-buffer)
  (global-set-key (kbd "C-x e") 'end-of-buffer)
  (global-unset-key (kbd "C-c m")) ; Original: `compile`.
  (global-set-key (kbd "C-c r") 'recompile)
  (with-eval-after-load 'helm
    (global-set-key (kbd "C-x m") 'helm-M-x)
    (global-set-key (kbd "C-c m") 'helm-M-x))
  ;; Adjust font size like web browsers. Doesn't work in terminal.
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  ;; Jump to visual line.
  (global-set-key (kbd "C-a") 'beginning-of-visual-line)
  (global-set-key (kbd "M-a") 'beginning-of-visual-line)
  (global-set-key (kbd "C-e") 'end-of-visual-line)
  (global-set-key (kbd "M-e") 'end-of-visual-line)

  ;; Automatically switch focus to newly splitted buffer.
  (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))

  ;; Cure bad habits.
  (global-set-key (kbd "M->") (lambda ()
			       (interactive)
			       (message "Use C-x e, dude.")))
  (global-set-key (kbd "M-<") (lambda ()
			       (interactive)
			       (message "Use C-x t, dude.")))
  (global-set-key (kbd "M-x") (lambda ()
			       (interactive)
			       (message "Use C-x m, dude.")))

  ; Somehow they don't bind later in `use-package`.
  (global-set-key (kbd "C-c o") 'dumb-jump-go-other-window)
  (global-set-key (kbd "C-c b") 'goto-last-change)

  ;; Alias.
  (defalias 'vce 'vc-ediff)
  (defalias 'reinit 'my/reload-init-file)
  (defalias 'undov 'undo-tree-visualize)
  (defalias 'dj 'dumb-jump-go-other-window)

#+END_SRC
* Self-defined function
#+BEGIN_SRC emacs-lisp
  ;; Don't put deleted word into the paste buffer.
  (defun my/delete-word (arg)
    "Delete characters forward until encountering the end of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point))))

  (defun my/backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (my/delete-word (- arg)))

  (global-set-key (kbd "M-<DEL>") 'my/backward-delete-word)
  (global-set-key (kbd "C-q") 'my/backward-delete-word) ;; Stevey's unpopular opinion. Faster to reach. Can kill your applicaton on windows.

  ;; Scroll window up/down by 8 lines.
  (global-set-key (kbd "C-<down>") (kbd "C-u 8 C-v"))
  (global-set-key (kbd "C-<up>") (kbd "C-u 8 M-v"))
  (global-set-key (kbd "M-n") (kbd "C-u 8 C-v"))
  (global-set-key (kbd "M-p") (kbd "C-u 8 M-v"))

  ;; Column goal.
  (defun my/toggle-goal-column ()
    "Toggle goal column mode."
    (interactive)
    (if goal-column
	(progn
	  (setq goal-column nil)
	  (message "Unset goal column"))
      (progn
	(setq goal-column (current-column))
	(message "Set goal column at %d" goal-column))))

  (global-set-key (kbd "C-x C-u") 'my/toggle-goal-column)

  ;; Auto-reload init files.
  (defun my/reload-init-file ()
    (interactive)
    (load-file user-init-file))

  ;; Save all buffers.
  (defun my/save-all-buffers ()
    "Instead of `save-buffer', save all opened buffers by calling `save-some-buffers' with ARG t."
    (interactive)
    (save-some-buffers t))

  (global-unset-key (kbd "C-x C-s"))
  (global-set-key (kbd "C-x C-s") 'my/save-all-buffers)

  ;; MiniBuffer Functions.
  (defun my/abort-minibuffer-using-mouse ()
    "Abort the minibuffer when using the mouse."
    (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
      (abort-recursive-edit)))

  (add-hook 'mouse-leave-buffer-hook 'abort-minibuffer-using-mouse)
      ;; keep the point out of the minibuffer
      (setq-default minibuffer-prompt-properties '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))

  ;; Edit this file.
  (defun my/edit-configs ()
    "Opens the README.org file."
    (interactive)
    (find-file "~/.emacs.d/myinit.org"))

  (global-set-key (kbd "C-c e") 'my/edit-configs)

  ;; Comment.
  (defun my/comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
	  (setq beg (region-beginning) end (region-end))
	(setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)
      (next-line)))

  (global-set-key (kbd "C-c c") 'my/comment-or-uncomment-region-or-line)
#+END_SRC
* Scroll and Click
#+BEGIN_SRC emacs-lisp
  ; Click and scroll in terminal.
  (unless (display-graphic-p)
    ;; activate mouse-based scrolling.
    (xterm-mouse-mode 1)
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))

  ;; Vertical Scroll
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 100000)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)

  ;; Horizontal Scroll
  (setq hscroll-step 1)
  (setq hscroll-margin 1)
  (setq scroll-preserve-screen-position t)

#+END_SRC
* MacOS
#+BEGIN_SRC emacs-lisp
  ; Handle copy and paste in OSX.
  (defun copy-from-osx ()
    "Handle copy/paste intelligently on osx."
    (let ((pbpaste (purecopy "/usr/bin/pbpaste")))
      (if (and (eq system-type 'darwin)
	       (file-exists-p pbpaste))
	    (let ((tramp-mode nil)
		  (default-directory "~"))
	      (shell-command-to-string pbpaste)))))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	(process-send-string proc text)
	(process-send-eof proc))))

  (if *sys/mac*
      (setq interprogram-cut-function 'paste-to-osx
	    interprogram-paste-function 'copy-from-osx))
#+END_SRC

* Backup
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq auto-save-list-file-prefix "~/.saves/.saves-")
  (setq backup-by-copying t)
  (setq delete-old-versions t
    kept-new-versions 20
    kept-old-versions 10
    version-control t)
#+END_SRC

* Whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
  :ensure t
  :init
  (progn
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (add-hook 'latex-mode-hook 'whitespace-mode)
  (remove-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq whitespace-line-column nil)
  (setq show-trailing-whitespace t)
  (setq whitespace-style
	'(face
	  tabs trailing space-before-tab space-after-tab ; tabs spaces trailing space-before-tab space-after-tab
	  tab-mark))))
#+END_SRC
* Ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :bind ("C-x C-b" . ibuffer)
    :init
    (use-package ibuffer-vc
      :commands (ibuffer-vc-set-filter-groups-by-vc-root)
      :custom
      (ibuffer-vc-skip-if-remote 'nil))
    :custom
    (ibuffer-formats
     '((mark modified read-only locked " "
	     (name 35 35 :left :elide)
	     " "
	     (size 9 -1 :right)
	     " "
	     (mode 16 16 :left :elide)
	     " " filename-and-process)
       (mark " "
	     (name 16 -1)
	     " " filename))))
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
  ;; https://github.com/MatthewZMD/.emacs.d?tab=readme-ov-file#ivy-amx-counsel-swiper
  (use-package ivy
    :ensure t
    :diminish
    :init
    (use-package amx :ensure t :defer t)
    (use-package counsel :ensure t :diminish :config (counsel-mode 1))
    (use-package swiper :ensure t :defer t)
    (ivy-mode 1)
    :bind
    (("C-s" . swiper-isearch)
     ("C-r" . swiper-isearch-backward)
     ("C-c s" . swiper-isearch-thing-at-point)
     ("M-y" . counsel-yank-pop)
     (:map ivy-minibuffer-map
	 ("M-RET" . ivy-immediate-done))
     (:map ivy-minibuffer-map
	 ("C-q" . ivy-immediate-done)))
    :custom
    ;; (ivy-use-virtual-buffers t)
    ;; (ivy-use-virtual-buffers nil)
    (setq ivy-display-style 'fancy)
    (ivy-height 10)
    (ivy-on-del-error-function nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    (ivy-count-format "%d/%d")
    (ivy-wrap t)
    :config
    (defun counsel-goto-local-home ()
	"Go to the $HOME of the local machine."
	(interactive)
      (ivy--cd "~/")))
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
  ; helm-M-x only
    (use-package helm
    :ensure t)
#+END_SRC

* Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :defer t
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
    (global-set-key (kbd "C-z") 'undo-tree-undo)
    (global-set-key (kbd "C-/") 'undo-tree-undo)
    (global-set-key (kbd "C-c z") 'undo-tree-redo)
    :custom
    (undo-tree-visualizer-diff t)
    (undo-tree-history-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))
    (undo-tree-visualizer-timestamps t)
    :config
    (unbind-key (kbd "C-x u") undo-tree-map)) ; Unbind visualize key.

  (eval-after-load 'undo-tree
    '(unbind-key (kbd "C-x u"))) ; Somehow you need both to unbind. Why emacs keybinding in modes and package is so confusing?
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'company-mode)
  (remove-hook 'text-mode-hook 'company-mode)
  :custom
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-require-match 'never)
  ;; Don't use company in the following modes
  (company-global-modes '(not shell-mode eaf-mode text-mode-hook latex-mode-hook))
  ;; Trigger completion immediately.
  (company-idle-delay 0.1)
  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (company-show-numbers t))

  ;; (defun my/python-mode-hook ()
  ;;   (add-to-list 'company-backends 'company-jedi))

  ;; (add-hook 'python-mode-hook 'my/python-mode-hook)
  ;; (use-package company-jedi
  ;;     :ensure t
  ;;     :config
  ;;     (add-hook 'python-mode-hook 'jedi:setup)
  ;;        )

  ;; (defun my/python-mode-hook ()
  ;;   (add-to-list 'company-backends 'company-jedi))

  ;; (add-hook 'python-mode-hook 'my/python-mode-hook)

#+END_SRC
* Spell check
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "/usr/local/bin/hunspell")
  (setq ispell-hunspell-dict-paths-alist
  '(("en_US" "/Applications/dict-en-20230701_lo/en_US.aff")))
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
  ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
  ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
  '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))

  (global-set-key (kbd "C-c l") 'ispell-word)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'latex-mode-hook 'flyspell-mode)
  ;; (setq ispell-program-name "/usr/local/bin/ispell")
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind
  (("C-x g" . magit-status)
   (:map magit-status-mode-map
         ("M-RET" . magit-diff-visit-file-other-window)))
  :config
  (defun magit-log-follow-current-file ()
    "A wrapper around `magit-log-buffer-file' with `--follow' argument."
    (interactive)
    (magit-log-buffer-file t)))
#+END_SRC emacs-lisp

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :init
    (use-package yasnippet-snippets :ensure t :after yasnippet)
    :hook ((prog-mode LaTeX-mode org-mode markdown-mode) . yas-minor-mode)
    :bind
    ;; (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
	  (("TAB" . smarter-yas-expand-next-field)
	   ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
	    (old-tick (buffer-chars-modified-tick)))
	(yas-expand)
	(when (and (eq old-point (point))
		   (eq old-tick (buffer-chars-modified-tick)))
	  (ignore-errors (yas-next-field))))))
    ;; (use-package yasnippet
    ;; :ensure t
    ;; :init
    ;; (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook (lambda () (global-display-line-numbers-mode -1)))
  (electric-indent-mode -1)
  ; Make tab work in Org-mode code block.
  (setq org-src-tab-acts-natively t)
  ; Highlight code block.
  (setq org-src-fontify-natively t)
  (add-hook 'latex-mode-hook 'visual-line-mode)
  ; (add-hook 'latex-mode-hook 'linum-relative-mode)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp

  (use-package python-mode
    :ensure nil
    :after flycheck
    :mode "\\.py\\'"
    :custom
    (python-indent-offset 4)
    (flycheck-python-pycompile-executable "python3")
    (python-shell-interpreter "python3"))


    (setq py-python-command "python3")
    (setq python-shell-interpreter "python3")

    (use-package python-black
      :ensure t
      :config
      (add-hook 'python-mode-hook 'python-black-on-save-mode))

    (use-package py-isort
      :ensure t
      :config
      (add-hook 'before-save-hook 'py-isort-before-save))

      ;; (use-package elpy
      ;;   :ensure t
      ;;   :init
      ;;   (elpy-enable)
      ;;   (setq elpy-rpc-virtualenv-path 'current))

      ;; (use-package py-autopep8
      ;;   :ensure t
      ;;   :config
      ;;   (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
      ;;   (setq py-autopep8-options '("--max-line-length=80")))

      ;; (use-package virtualenvwrapper
      ;; :ensure t
      ;;   :config
      ;;   (venv-initialize-interactive-shells)
      ;;   (venv-initialize-eshell))
#+END_SRC
* Dumb Jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  ;:bind
  ;(:map prog-mode-map
  ;     (("C-c C-o" . dumb-jump-go-other-window)
  ;       ("C-c C-j" . dumb-jump-go)
  ;       ("C-c C-i" . dumb-jump-go-prompt)))
  :custom (dumb-jump-selector 'ivy))
#+END_SRC emacs-lisp

* goto-chg
#+BEGIN_SRC emacs-lisp
  (use-package goto-chg
    :ensure t)
#+END_SRC emacs-lisp

* Theme
#+BEGIN_SRC emacs-lisp
  ;; (use-package spacemacs-theme
  ;;   :defer t
  ;;   :init (load-theme 'spacemacs-light t))
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; (if (display-graphic-p)
    ;;     (load-theme 'doom-ayu-light t)
      (load-theme 'doom-feather-light t))

  (use-package zenburn-theme
    :ensure t
    :config
    (if (display-graphic-p)
	(load-theme 'zenburn t)))
#+END_SRC
* Recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :custom
  (recentf-auto-cleanup "05:00am")
  (recentf-max-saved-items 200)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "COMMIT_EDITMSG\\'")))

;; When buffer is closed, saves the cursor location
(save-place-mode 1)

;; Set history-length longer
(setq-default history-length 500)
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :bind
  (("C-x C-j" . dired-jump))
  :custom
  ;; Always delete and copy recursively
  (dired-listing-switches "-lah")
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  ;; Auto refresh Dired, but be quiet about it
  (global-auto-revert-non-file-buffers t)
  (auto-revert-verbose nil)
  ;; Quickly copy/move file in Dired
  (dired-dwim-target t)
  ;; Move files to trash when deleting
  (delete-by-moving-to-trash t)
  ;; Load the newest version of a file
  (load-prefer-newer t)
  ;; Detect external file changes and auto refresh file
  (auto-revert-use-notify nil)
  (auto-revert-interval 3) ; Auto revert every 3 sec
  :config
  ;; Enable global auto-revert
  (global-auto-revert-mode t)
  ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
  (put 'dired-find-alternate-file 'disabled nil)
  :hook
  (dired-mode . (lambda ()
                  (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                  (local-set-key (kbd "RET") #'dired-find-alternate-file)
                  (local-set-key (kbd "^")
                                 (lambda () (interactive) (find-alternate-file ".."))))))
#+END_SRC
* Crux
#+BEGIN_SRC emacs-lisp
  (use-package crux
  :ensure t
  :bind
  (("C-x K" . crux-kill-other-buffers)
   ("C-k" . crux-smart-kill-line)
   ("C-o" . crux-smart-open-line)
   ("M-o" . crux-smart-open-line-above)
   ("C-c f" . crux-recentf-find-file)
   ("C-c d" . crux-duplicate-current-line-or-region)
   ("C-c q" . crux-duplicate-and-comment-current-line-or-region)
   ("C-c t" . crux-visit-term-buffer)
   :map prog-mode-map
   ("C-a" . crux-move-beginning-of-line) ; Programming only.
   )
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer 'crux-rename-file-and-buffer))
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :bind
    (:map smartparens-mode-map
	  ("C-M-f" . sp-forward-sexp)
	  ("C-M-b" . sp-backward-sexp)
	  ("C-M-a" . sp-backward-down-sexp)
	  ("C-M-e" . sp-up-sexp))
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    ;; Stop pairing single quotes in elisp.
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))
#+END_SRC

* Shell
#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/bin/zsh")

  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
* Tramp
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
* Column width
#+BEGIN_SRC emacs-lisp
  (setq-default display-fill-column-indicator-column 87) ; 88 linewidth
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'latex-mode-hook 'display-fill-column-indicator-mode)
#+END_SRC
* Highlight indent
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-auto-enabled nil))
#+END_SRC

* Highlight current word
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'highlight-symbol-mode))
#+END_SRC

* Hightlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode +1)
    ;; (require 'hl-line)
    ;; (add-hook 'prog-mode-hook 'hl-line-mode)
    ;; (set-face-background hl-line-face "#DCDCDC")

  ;; highlight only a single virtual line
  (setq hl-line-range-function
	'(lambda()
	   (save-excursion
	     (cons
	      (progn
		(beginning-of-visual-line)
		(point))
	      (progn
		(beginning-of-visual-line 2)
		(point))))))
#+END_SRC

* Aggressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
  :ensure t
  :config
  (global-aggressive-indent-mode 1))
#+END_SRC
* PATH
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)
  )
#+END_SRC
* Beacon mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1))
#+END_SRC
* Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-c =") 'er/expand-region))
#+END_SRC
* Winner
Restore previous window layouts.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :ensure t
  :custom
  (winner-boring-buffers
   '("*Completions*"
     "*Compile-Log*"
     "*inferior-lisp*"
     "*Fuzzy Completions*"
     "*Apropos*"
     "*Help*"
     "*cvs*"
     "*Buffer List*"
     "*Ibuffer*"
     "*esh command on file*"))
  :config
  (winner-mode 1))
#+END_SRC
* Ace Window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("C-x C-o" . ace-window))
#+END_SRC
* UTF-8
#+BEGIN_SRC emacs-lisp
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
* Small configs
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq use-dialog-box nil)

  ;; Move the backup fies to user-emacs-directory/.backup.
  (setq backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))

  ;; Automatically kill all active processes when closing Emacs.
  (setq confirm-kill-processes nil)

  ;; Turn Off Cursor Alarms.
  (setq ring-bell-function 'ignore)

  ;; Show Keystrokes in Progress Instantly.
  (setq echo-keystrokes 0.1)

  ;; Don't Lock Files.
  (setq-default create-lockfiles nil)

  ;; ad-handle-definition warnings are generated when functions are redefined with `defadvice', they are not helpful.
  (setq ad-redefinition-action 'accept)

  ;; Move Custom-Set-Variables to Different File.
  (setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
  (load custom-file 'noerror)

  ;; So Long mitigates slowness due to extremely long lines.
  ;; Currently available in Emacs master branch *only*!
  (when (fboundp 'global-so-long-mode)
    (global-so-long-mode))

  ;; Add a newline automatically at the end of the file upon save.
  (setq require-final-newline t)

  ;; Enable `erase-buffer' function.
  (put 'erase-buffer 'disabled nil)

  ;; Prevent down-arrow from adding empty lines to the bottom of the buffer.
  (setq next-line-add-newlines nil)

  ;; Line numbers
  ;;  (global-linum-mode)
  ;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;; Display column numbers in modeline
  (column-number-mode 1)
  ;; (setq linum-relative-current-symbol "")

  ;; Save whatever’s in the current system clipboard before replacing it with the Emacs' text.
  (setq save-interprogram-paste-before-kill t)

  ;; Stop ivy from displaying recentf files.
  (setq ivy-use-virtual-buffers nil)

  ;; Visual line don't break the word.
  (setq-default word-wrap t)

  ;; Paren match.
  (add-hook 'prog-mode-hook 'show-paren-mode)

  ;; Automatically update a buffer if a file changes on disk.
  (global-auto-revert-mode 1)
  (add-hook 'dired-mode-hook 'auto-revert-mode) ;; Refresh dired too.

  ;; Give context to cursor.
  (setq scroll-margin 4)

  ;; Show unfinished keystrokes early.
  (setq echo-keystrokes 0.1)

#+END_SRC
