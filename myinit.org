#+STARTIP: overview
Rebinding of basic commands:
| Key                 | Command                                        |
|---------------------+------------------------------------------------|
| `C-s`               | save                                           |
| `C-w`               | backward delete word or region if selected     |
| `C-x m` or `C-c m`  | M-x                                            |
| `C-q`               | search (q for query)                           |
| `C-z`               | undo                                           |
| `C-r`               | redo                                           |
| `C-o`               | switch window                                  |
| `C-x t` or `C-c t`  | beginning (t for top) of buffer                |
| `C-x e` or `C-c t`  | end of buffer                                  |
| `M-p` or `C-<up>`   | page up (only a few lines)                     |
| `M-n` or `C-<down>` | page down (only a few lines)                   |
| `M-c`               | copy                                           |
| `M-v`               | paste                                          |
| `C-/`               | Comment or uncomment (not working in terminal) |

System configs.
#+begin_src emacs-lisp
  ;; Define system.
  (defconst *sys/linux*
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst *sys/mac*
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  ;; Map Mac's command key to Meta only in GUI. Do it in iTerm2 config.
  (if *sys/mac*
      (setq mac-command-modifier 'meta
	    mac-right-command-modifier 'super))
#+end_src
* Ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind
    ("C-x o" . ace-window)
    :init
    (global-set-key (kbd "C-o") 'other-window))
#+end_src
* Aggressive Indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1)
    :custom
    (aggressive-indent-comments-too t))
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :defer t
    :bind
    (("M-s" . avy-goto-char-2))
    :custom
    (avy-style 'pre)
    :custom-face
    (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))))
#+end_src
* Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq auto-save-list-file-prefix "~/.saves/.saves-")
  (setq backup-by-copying t)
  (setq delete-old-versions t
    kept-new-versions 20
    kept-old-versions 10
    version-control t)
#+end_src
* Beacon Mode
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+end_src
* Change-inner
#+begin_src emacs-lisp
  (use-package change-inner
    :ensure t
    :init
    (global-set-key (kbd "M-i") 'change-inner))
#+end_src
* Column Width Indicator
#+begin_src emacs-lisp
  (setq-default display-fill-column-indicator-column 79) ; 80 linewidth
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'company-mode)
    (remove-hook 'text-mode-hook 'company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t)
    (company-require-match 'never)
    ;; Don't use company in the following modes
    (company-global-modes
     '(not shell-mode eaf-mode text-mode-hook latex-mode-hook))
    ;; Trigger completion immediately.
    (company-idle-delay 0.1)
    ;; Number the candidates (use M-1, M-2 etc to select completions).
    (company-show-numbers t))

  ;; M-/ for Hippe expand.
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src
* Crux
#+begin_src emacs-lisp
  (use-package crux
    :ensure t
    :bind
    (("C-x K" . crux-kill-other-buffers)
     ("C-k" . crux-smart-kill-line)
     ("C-c f" . crux-recentf-find-file)
     ("C-c d" . crux-duplicate-current-line-or-region)
     ("C-c q" . crux-duplicate-and-comment-current-line-or-region)
     :map prog-mode-map
     ("M-<return>" . crux-smart-open-line)
     ("M-RET" . crux-smart-open-line))
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-line comment-or-uncomment-region) ; (Un)commenting works on line.
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer 'crux-rename-file-and-buffer)
    :init
    (global-set-key (kbd "M-;") 'comment-or-uncomment-region)
    (global-set-key (kbd "C-/") 'comment-or-uncomment-region))
#+end_src
* Dimmer
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :init
    (dimmer-configure-helm)
    (dimmer-mode t)
    :custom
    (dimmer-fraction 0.6))
#+end_src
* Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :bind
    (("C-x C-j" . dired-jump))
    :custom
    ;; Always delete and copy recursively.
    (dired-listing-switches "-lah")
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it.
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired.
    (dired-dwim-target t)
    ;; Move files to trash when deleting.
    (delete-by-moving-to-trash t)
    ;; Load the newest version of a file.
    (load-prefer-newer t)
    ;; Detect external file changes and auto refresh file.
    (auto-revert-use-notify nil)
    ;; Auto revert every 3 sec.
    (auto-revert-interval 3)
    :config
    ;; Reuse same dired buffer, to prevent numerous buffers while navigating in
    ;; dired.
    (put 'dired-find-alternate-file 'disabled nil)
    :hook
    (dired-mode . (lambda ()
		    (local-set-key (kbd "<mouse-2>")
				   'dired-find-alternate-file)
		    (local-set-key (kbd "RET") #'dired-find-alternate-file)
		    (local-set-key (kbd "^")
				   (lambda () (interactive)
				     (find-alternate-file ".."))))))
#+end_src
* Disable Useless Things
#+begin_src emacs-lisp
  ;; Useless thing.
  (setq inhibit-startup-screen t)
  (setq initial-major-mode 'text-mode)
  (setq inhibit-startup-message t)
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
  (menu-bar-mode -1)
  (setq-default visible-bell t)
  (blink-cursor-mode 0)
  (setq ns-use-proxy-icon nil) ; Icon of filetype.
  (setq initial-scratch-message "")

  ;; Useless keys.
  (global-unset-key (kbd "C-z")) ; Don't hit it and suspend it in terminal.
  (global-unset-key (kbd "M-z"))
  (global-unset-key (kbd "M-m"))
  (global-unset-key (kbd "C-x C-z"))
  (global-unset-key (kbd "C-x m"))
  (global-unset-key (kbd "C-x C-u"))
  (global-unset-key (kbd "C-x C-l"))
  (global-unset-key (kbd "C-x f"))
  ;; Too much to type for saving. Map to `C-s` instead.
  (global-unset-key (kbd "C-x C-s"))
#+end_src
* Dumb Jump
#+begin_src emacs-lisp
(use-package dumb-jump
  :ensure t
  :custom
  (dumb-jump-selector 'ivy)
  :bind
  (:map prog-mode-map
    ("C-c C-o" . dumb-jump-go-other-window))
  :init
  (setq xref-show-definitions-function 'xref-show-definitions-completing-read)
  :config
  (add-hook 'xref-backend-functions 'dumb-jump-xref-activate))
#+end_src emacs-lisp
* Ediff
#+begin_src emacs-lisp
(use-package ediff
  :custom
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
* Expand Region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-c =") 'er/expand-region)
    (global-set-key (kbd "M-e") 'er/expand-region))
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :diminish
    :hook (after-init . global-flycheck-mode)
    :commands (flycheck-add-mode)
    :custom
    (flycheck-global-modes
     '(not outline-mode diff-mode shell-mode eshell-mode term-mode))
    (flycheck-emacs-lisp-load-path 'inherit)
    (flycheck-indication-mode (if (display-graphic-p)
				  'right-fringe 'right-margin))
    :init
    (add-hook 'prog-mode-hook 'flycheck-mode))
#+end_src
* Font
#+begin_src emacs-lisp
  (set-frame-font "Source Code Pro 16" nil t)

  ;; UTF-8.
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
* Goto-chg
#+begin_src emacs-lisp
  (use-package goto-chg
    :ensure t
    :init
    (global-set-key (kbd "C-c b") 'goto-last-change))
#+end_src emacs-lisp
* Highlight
#+begin_src emacs-lisp
  ;; Highlight indent.
  (use-package highlight-indent-guides
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-auto-enabled nil))

  ;; Highlight current word.
  (use-package highlight-symbol
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-symbol-mode))
#+end_src
* Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure t
    :bind ("C-x C-b" . ibuffer)
    :init
    (use-package ibuffer-vc
      :commands (ibuffer-vc-set-filter-groups-by-vc-root)
      :custom
      (ibuffer-vc-skip-if-remote 'nil))
    :custom
    (ibuffer-formats
     '((mark modified read-only locked " "
	     (name 35 35 :left :elide)
	     " "
	     (size 9 -1 :right)
	     " "
	     (mode 16 16 :left :elide)
	     " " filename-and-process)
       (mark " "
	     (name 16 -1)
	     " " filename))))
#+end_src
* Ivy
#+begin_src emacs-lisp
  ;; https://github.com/MatthewZMD/.emacs.d?tab=readme-ov-file#ivy-amx-counsel-swiper.
  (use-package ivy
    :ensure t
    :diminish
    :init
    (use-package amx :ensure t :defer t)
    (use-package counsel :ensure t :diminish :config (counsel-mode 1))
    (use-package swiper :ensure t :defer t)
    ;; Stevey's suggestion.
    (global-set-key (kbd "C-x m") 'counsel-M-x)
    (global-set-key (kbd "C-c m") 'counsel-M-x)
    (ivy-mode 1)
    :bind
    (("C-q" . swiper-isearch) ; No need for reverse search. Can just cycle back.
     ("C-c s" . swiper-isearch-thing-at-point)
     ("M-y" . counsel-yank-pop)
     ("C-c i" . counsel-imenu)
     (:map ivy-minibuffer-map
	 ("M-RET" . ivy-immediate-done)))
    :custom
    ;; (ivy-use-virtual-buffers t)
    ;; (ivy-use-virtual-buffers nil)
    (setq ivy-display-style 'fancy)
    (ivy-height 10)
    (ivy-on-del-error-function nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    (ivy-count-format "%d/%d")
    (ivy-wrap t)
    ;; `counsel-M-x` prompt doesn't start with `^` to match only beginning of string.
    (ivy-initial-inputs-alist nil)
    :config
    (defun counsel-goto-local-home ()
	"Go to the $HOME of the local machine."
	(interactive)
      (ivy--cd "~/")))
#+end_src
* MacOS
#+begin_src emacs-lisp
  ;; Handle copy and paste in OSX.
  (defun copy-from-osx ()
    "Handle copy/paste intelligently on osx."
    (let ((pbpaste (purecopy "/usr/bin/pbpaste")))
      (if (and (eq system-type 'darwin)
	       (file-exists-p pbpaste))
	    (let ((tramp-mode nil)
		  (default-directory "~"))
	      (shell-command-to-string pbpaste)))))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	(process-send-string proc text)
	(process-send-eof proc))))

  (if *sys/mac*
      (setq interprogram-cut-function 'paste-to-osx
	    interprogram-paste-function 'copy-from-osx))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    (("C-x g" . magit-status)
    (:map magit-status-mode-map
    ("M-RET" . magit-diff-visit-file-other-window)))
    :config
    (defun magit-log-follow-current-file ()
    "A wrapper around `magit-log-buffer-file' with `--follow' argument."
    (interactive)
    (magit-log-buffer-file t))
    (setq magit-log-arguments '("-n256" "--graph" "--decorate" "--color")
    ;; Show diff per word.
    magit-diff-refine-hunk t))
#+end_src emacs-lisp
* Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'left)
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
* Multi-cursor
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :init
    (global-set-key (kbd "C-c <return>") 'mc/edit-lines)
    (global-set-key (kbd "C-c RET") 'mc/edit-lines))
#+end_src
* Mwim
#+begin_src emacs-lisp
  (use-package mwim
    :ensure t
    :init
    (global-set-key (kbd "C-a") 'mwim-beginning)
    (global-set-key (kbd "C-e") 'mwim-end))
#+end_src
* My/Functions
#+begin_src emacs-lisp
  ;; Backward kill word or the region if selected.
  (defun my/backward-kill-word-or-kill-region ()
    "Kill a word backward or the region if selected."
    (interactive)
    (if (region-active-p)
	(kill-region (region-beginning) (region-end))
      (backward-kill-word 1)))

  (global-set-key (kbd "C-w") 'my/backward-kill-word-or-kill-region)

  ;; Scroll window up/down by 8 lines.
  (global-set-key (kbd "C-<down>") (lambda () (interactive) (scroll-up 8)))
  (global-set-key (kbd "C-<up>") (lambda () (interactive) (scroll-down 8)))
  (global-set-key (kbd "M-n") (lambda () (interactive) (scroll-up 8)))
  (global-set-key (kbd "M-p") (lambda () (interactive) (scroll-down 8)))

  ;; When splitting window, automatically balance them and switch focus to the newly splitted window.
  (global-set-key (kbd "C-x 2")
		  (lambda ()
		    (interactive)
		    (split-window-vertically)
		    (balance-windows)
		    (other-window 1)))
  (global-set-key (kbd "C-x 3")
		  (lambda ()
		    (interactive)
		    (split-window-horizontally)
		    (balance-windows)
		    (other-window 1)))

  ;; Auto-balance window when deleting window.
  (global-set-key (kbd "C-x 0")
		  (lambda ()
		    (interactive)
		    (delete-window)
		    (balance-windows)))

  ;; Column goal.
  (defun my/toggle-goal-column ()
    "Toggle goal column mode."
    (interactive)
    (if goal-column
	(progn
	  (setq goal-column nil)
	  (message "Unset goal column"))
      (progn
	(setq goal-column (current-column))
	(message "Set goal column at %d" goal-column))))

  (global-set-key (kbd "C-x C-u") 'my/toggle-goal-column)

  ;; Reload init files.
  (defun my/reload-init-file ()
    (interactive)
    (load-file user-init-file))

  ;; Save all buffers.
  (defun my/save-all-buffers ()
    "Instead of `save-buffer', save all opened buffers by calling
      `save-some-buffers' with ARG t."
    (interactive)
    (save-some-buffers t))

  (global-set-key (kbd "C-s") 'my/save-all-buffers)

  ;; MiniBuffer Functions.
  (defun my/abort-minibuffer-using-mouse ()
    "Abort the minibuffer when using the mouse."
    (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
      (abort-recursive-edit)))

  (add-hook 'mouse-leave-buffer-hook 'my/abort-minibuffer-using-mouse)
  ;; Keep the point out of the minibuffer.
  (setq-default minibuffer-prompt-properties
		'(read-only t point-entered minibuffer-avoid-prompt
			    face minibuffer-prompt))

  ;; Edit this file.
  (defun my/edit-configs ()
    "Opens this file."
    (interactive)
    (find-file "~/.emacs.d/myinit.org"))

  ;; C-a and C-e jump to visual line in visual-line-mode.
  (defun my/visual-line-mode-hook ()
    (define-key visual-line-mode-map (kbd "C-a") 'beginning-of-visual-line)
    (define-key visual-line-mode-map (kbd "C-e") 'end-of-visual-line))

  (add-hook 'visual-line-mode-hook 'my/visual-line-mode-hook)
#+end_src
* My/Keybindings
#+begin_src emacs-lisp
  ;; Stevey's suggestion.
  (global-set-key (kbd "C-x t") 'beginning-of-buffer)
  (global-set-key (kbd "C-c t") 'beginning-of-buffer)
  (global-set-key (kbd "C-x e") 'end-of-buffer)
  (global-set-key (kbd "C-c e") 'end-of-buffer)

  ;; Conventional copy/paste.
  (global-set-key (kbd "M-c") 'kill-ring-save)
  (global-set-key (kbd "M-v") 'yank)

  ;; Adjust font size like web browsers. Doesn't work in terminal.
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  ;; Wrap.
  (global-set-key (kbd "C-c w") 'toggle-truncate-lines)

  ;; Cure bad habits.
  (global-set-key (kbd "M-x") (lambda ()
			       (interactive)
			       (message "Use C-x m, dude.")))
  (global-set-key (kbd "C-x C-s") (lambda ()
			       (interactive)
			       (message "Use C-s, dude.")))

  ;; Somehow they don't bind later in `use-package`. Need to install first.
  (global-set-key (kbd "C-c C-o") 'dumb-jump-go-other-window)
  (global-set-key (kbd "C-c b") 'goto-last-change)

  ;; Misc.
  (global-set-key (kbd "M-g") 'goto-line)
  (global-set-key (kbd "C-x k") 'kill-this-buffer) ; Don't ask.
  (global-set-key (kbd "C-x \\") 'sort-lines)
  (global-set-key (kbd "C-x ?") 'describe-key)

  ;; Aliases.
  (defalias 'rl  'my/reload-init-file)
  (defalias 'cf  'my/edit-configs)
  (defalias 'vce 'vc-ediff)
  (defalias 'rc  'recompile)
  (defalias 'qr  'query-replace)
  (defalias 'bl  'python-black-buffer)
  (defalias 'is  'py-isort-buffer)
#+end_src
* My/Small Configs
#+begin_src emacs-lisp
  ;; C-p, C-n, etc uses visual lines.
  (setq line-move-visual t)

  ;; y or n.
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Ask before killing emacs.
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; No dialgue!
  (setq use-dialog-box nil)

  ;; Move the backup fies to user-emacs-directory/.backup.
  (setq backup-directory-alist
	`(("." . ,(expand-file-name ".backup" user-emacs-directory))))

  ;; Automatically kill all active processes when closing Emacs.
  (setq confirm-kill-processes nil)

  ;; Turn Off Cursor Alarms.
  (setq ring-bell-function 'ignore)

  ;; Show Keystrokes in Progress Instantly.
  (setq echo-keystrokes 0.1)

  ;; Don't Lock Files.
  (setq-default create-lockfiles nil)

  ;; ad-handle-definition warnings are generated when functions are
  ;; redefined with `defadvice', they are not helpful.
  (setq ad-redefinition-action 'accept)

  ;; Move Custom-Set-Variables to Different File.
  (setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
  (load custom-file 'noerror 'nomessage)

  ;; So Long mitigates slowness due to extremely long lines.
  ;; Currently available in Emacs master branch *only*!
  (when (fboundp 'global-so-long-mode)
    (global-so-long-mode))

  ;; Add a newline automatically at the end of the file upon save.
  (setq require-final-newline t)

  ;; Enable `erase-buffer' function.
  (put 'erase-buffer 'disabled nil)

  ;; Prevent down-arrow from adding empty lines to the bottom of the buffer.
  (setq next-line-add-newlines nil)

  ;; Don't show line numbers.
  ;;  (global-linum-mode)
  (column-number-mode 1)

  ;; Save whatever’s in the current system clipboard before replacing it with
  ;; the Emacs' text.
  (setq save-interprogram-paste-before-kill t)

  ;; Stop ivy from displaying recentf files.
  (setq ivy-use-virtual-buffers nil)

  ;; Width to wrap lines.
  (setq fill-column 100)

  ;; Visual line don't break the word.
  (setq-default word-wrap t)

  ;; Paren match.
  (add-hook 'prog-mode-hook 'show-paren-mode)

  ;; Automatically update a buffer if a file changes on disk.
  (global-auto-revert-mode 1)
  (add-hook 'dired-mode-hook 'auto-revert-mode) ; Refresh dired too.

  ;; Give context to cursor.
  (setq scroll-margin 4)

  ;; Show unfinished keystrokes early.
  (setq echo-keystrokes 0.1)

  ;; Hide all modes in the mode line.
  (setq-default mode-line-format (delq 'mode-line-modes mode-line-format))

  ;; Show time.
  (setq display-time-format "[%Y-%m-%d (%a) %H:%M]")
  (setq display-time-default-load-average nil)
  (display-time-mode 1)

  ;; Don't ask when killing a buffer with a live process.
  (setq kill-buffer-query-functions
	(remq 'process-kill-buffer-query-function
	      kill-buffer-query-functions))

  ;; Tramp.
  (setq tramp-default-method "ssh")

  ;; Uses system trash rather than deleting forever.
  (setq trash-directory "~/.Trash")
  (setq delete-by-moving-to-trash t)

  ;; Better Compilation.
  ;; Kill compilation process before starting another.
  (setq-default compilation-always-kill t)
  ;; Save all buffers on `compile'.
  (setq-default compilation-ask-about-save nil)
  (setq-default compilation-scroll-output t)

  ;; Move `custom-set-variables` to a different file.
  (setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
  (load custom-file 'noerror)

  ;; Switch to help buffers automatically.
  (setq help-window-select t)

  ;; Reduce a little typing latency.
  (setq redisplay-dont-pause t)

  ;; Electric indent.
  (add-hook 'prog-mode-hook 'electric-indent-mode)
  ;; Cause annoying auto indent in org mode.
  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode 0)))

  ;; Warn only when opening files bigger than 100MB.
  (setq large-file-warning-threshold 100000000)

  ;; Frame title shows either a file or a buffer name
  ;; (if the buffer isn't visiting a file)
  (setq frame-title-format
	'((:eval (if (buffer-file-name)
		     (abbreviate-file-name (buffer-file-name))
		   "%b"))))

  ;; Maximize the initial frame.
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))

  ;; Treat selected region like a normal region in other systems.
  (delete-selection-mode t)

  ;; Savehist.
  (setq history-length 100)
  (savehist-mode 1)

  ;; Default some files to text-mode.
  (add-to-list 'auto-mode-alist '("\\.in\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.out\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.args\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.bb\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.bbclass\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . markdown-mode))
#+end_src
* Org
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :defer t
    :bind
    (:map org-mode-map
	  ("C-i" . nil)
	  ("M-h" . nil)
	  ;; Don't know why tab doesn't fold/unfold heading if using
	  ;; `use-package` to config org setting (it works if org
	  ;; setting is config without `use-package`).
	  ("TAB" . org-cycle))
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (python . t)))
    :custom
    ;; Make tab work in Org-mode code block.
    (org-src-tab-acts-natively t)
    ;; Highlight code block.
    (org-src-fontify-natively t)
    ;; Don't ask when running python code.
    (org-confirm-babel-evaluate (lambda (lang body) (not (string= lang "python"))))
    :init
    (add-hook 'org-mode-hook 'visual-line-mode))
#+end_src
* Parens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :bind
    (:map smartparens-mode-map
	  ("C-M-f" . sp-forward-sexp)
	  ("C-M-b" . sp-backward-sexp)
	  ("C-M-a" . sp-backward-down-sexp)
	  ("C-M-e" . sp-up-sexp))
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    ;; Stop pairing single quotes in elisp.
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))

  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
* PATH
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+end_src
* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :after ivy
    :bind (:map projectile-mode-map
		("C-x p" . projectile-command-map))
    :custom
    (projectile-completion-system 'ivy)
    :init
    (projectile-mode +1)
    (setq projectile-switch-project-action 'projectile-dired)
    (setq projectile-find-dir-includes-top-level t))
#+end_src

* Python
#+begin_src emacs-lisp
  (use-package python-mode
    :ensure nil
    :after flycheck
    :mode "\\.py\\'"
    :custom
    (python-indent-offset 4)
    (flycheck-python-pycompile-executable "python3")
    (python-shell-interpreter "python3")
    (py-python-command "python3")
    (python-shell-interpreter "python3"))

  (use-package python-black
    :ensure t
    :after python)

  (use-package py-isort
    :ensure t)
#+end_src
* Recentf
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :custom
    (recentf-auto-cleanup "05:00am")
    (recentf-max-saved-items 200)
    (recentf-exclude '((expand-file-name package-user-dir)
		       ".cache"
		       ".cask"
		       ".elfeed"
		       "bookmarks"
		       "cache"
		       "ido.*"
		       "persp-confs"
		       "recentf"
		       "undo-tree-hist"
		       "url"
		       "COMMIT_EDITMSG\\'")))

  ;; When buffer is closed, saves the cursor location.
  (save-place-mode 1)

  ;; Set history-length longer.
  (setq-default history-length 500)
#+end_src
* Scroll
#+begin_src emacs-lisp
  ;; Vertical Scroll.
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 100000)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)

  ;; Horizontal Scroll.
  (setq hscroll-step 1)
  (setq hscroll-margin 1)
  (setq scroll-preserve-screen-position t)

  ;; Click and scroll in terminal.
  (unless (display-graphic-p)
    ;; Activate mouse-based scrolling.
    (xterm-mouse-mode 1)
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))
#+end_src
* Shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns x))
    :init
    (setq explicit-shell-file-name "/bin/zsh")
    :config
    (exec-path-from-shell-initialize))
#+end_src
* Spell Checker
#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :diminish
    :if (executable-find "hunspell")
    :hook (((text-mode outline-mode
	     latex-mode org-mode markdown-mode) . flyspell-mode))
    :init
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    :custom
    (flyspell-issue-message-flag nil)
    (ispell-program-name "/usr/local/bin/hunspell")
    (ispell-hunspell-dict-paths-alist
      '(("en_US" "/Applications/dict-en-20230701_lo/en_US.aff")))
    (ispell-local-dictionary "en_US")
    (ispell-local-dictionary-alist
    ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters
    ;; passed to hunspell. You could use `("-d" "en_US,en_US-med")` to check
    ;; with multiple dictionaries.
    '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
    :config
    (use-package flyspell-correct-ivy
      :after ivy
      :ensure t
      :bind
      (:map flyspell-mode-map
	    ([remap flyspell-correct-word-before-point] .
	      flyspell-correct-wrapper)
	    ("C-c l" . flyspell-correct-wrapper))
      :custom (flyspell-correct-interface 'flyspell-correct-ivy)))
#+end_src
* Super-save
#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (add-to-list 'super-save-triggers 'ace-window)
    (super-save-mode +1))
#+end_src
* Term
#+begin_src emacs-lisp
  (use-package term
    :ensure nil
    :bind
    (:map term-raw-map
	  ("C-y" . term-paste)
	  ("M-v" . term-paste)))
#+end_src
* TeX
#+begin_src emacs-lisp
  (use-package tex
    :ensure nil
    :init
    (add-hook 'tex-mode-hook 'visual-line-mode))
#+end_src
* Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (if (display-graphic-p)
      (progn
       (load-theme 'doom-zenburn t)
	 (set-cursor-color "#F0F0F0")
	 ;; Paren matching color.
	 (set-face-attribute 'show-paren-match nil :foreground "#E0115F" :background "#CCCCCC"))
      (progn
	(load-theme 'doom-tomorrow-day t)
	 ;; Paren matching color.
	(set-cursor-color "#404040")
	(set-face-attribute 'show-paren-match nil :foreground "#E0115F" :background "#666666"))))
#+end_src
* Tree-sitter
#+begin_src emacs-lisp
  (use-package treesit
    :ensure nil
    :init
    (setq treesit-language-source-alist
	  '((bash "https://github.com/tree-sitter/tree-sitter-bash")
	    (cmake "https://github.com/uyha/tree-sitter-cmake")
	    (css "https://github.com/tree-sitter/tree-sitter-css")
	    (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	    (go "https://github.com/tree-sitter/tree-sitter-go")
	    (html "https://github.com/tree-sitter/tree-sitter-html")
	    (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	    (json "https://github.com/tree-sitter/tree-sitter-json")
	    (make "https://github.com/alemuller/tree-sitter-make")
	    (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	    (python "https://github.com/tree-sitter/tree-sitter-python")
	    (toml "https://github.com/tree-sitter/tree-sitter-toml")
	    (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	    (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	    (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))
    ;; Turn if off. Auto-indent is too annoying. Don't know how to turn it off. Treesitter seems still buggy and hacky.
    ;; ;; Hacky. https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
    ;; (setq major-mode-remap-alist
    ;; 	'((yaml-mode . yaml-ts-mode)
    ;; 	  (bash-mode . bash-ts-mode)
    ;; 	  (js2-mode . js-ts-mode)
    ;; 	  (typescript-mode . typescript-ts-mode)
    ;; 	  (json-mode . json-ts-mode)
    ;; 	  (css-mode . css-ts-mode)
    ;; 	  (python-mode . python-ts-mode)))
    ;; ;; Annoying auto-indent.
    ;; (setq tree-sitter-
	  ;; indent-mode nil))
#+end_src
* Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :defer t
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
    (global-set-key (kbd "C-z") 'undo-tree-undo)
    (global-set-key (kbd "C-r") 'undo-tree-redo)
    ;; Somehow you need both to unbind. Why emacs keybinding in modes and package is so confusing?
    (eval-after-load 'undo-tree '(unbind-key (kbd "C-x u")))
    ;; Unbind `C-/` to avoid overwriting for the globally set key mapped to
    ;; comment.
    :bind (:map undo-tree-map
		("C-/" . nil))
    :custom
    (undo-tree-visualizer-diff t)
    (undo-tree-history-directory-alist
       `(("." . ,(expand-file-name ".backup" user-emacs-directory))))
    (undo-tree-visualizer-timestamps t)
    :config
    (unbind-key (kbd "C-x u") undo-tree-map)) ; Unbind visualize key.
#+end_src
* Whitespace
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'whitespace-mode)
    (add-hook 'latex-mode-hook 'whitespace-mode)
    (remove-hook 'before-save-hook 'delete-trailing-whitespace)
    :custom
    (whitespace-line-column nil)
    (show-trailing-whitespace t)
    (whitespace-style
     '(face
       ;; tabs spaces trailing space-before-tab space-after-tab
       tabs trailing space-before-tab space-after-tab
       tab-mark)))
#+end_src
* Winner
Restore previous window layouts.
#+begin_src emacs-lisp
(use-package winner
  :ensure t
  :custom
  (winner-boring-buffers
   '("*Completions*"
     "*Compile-Log*"
     "*inferior-lisp*"
     "*Fuzzy Completions*"
     "*Apropos*"
     "*Help*"
     "*cvs*"
     "*Buffer List*"
     "*Ibuffer*"
     "*esh command on file*"))
  :config
  (winner-mode 1))
#+end_src
* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :init
    (use-package yasnippet-snippets :ensure t :after yasnippet)
    :hook ((prog-mode LaTeX-mode org-mode markdown-mode) . yas-minor-mode)
    :bind
    ;; (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
	  (("TAB" . smarter-yas-expand-next-field)
	   ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
	    (old-tick (buffer-chars-modified-tick)))
	(yas-expand)
	(when (and (eq old-point (point))
		   (eq old-tick (buffer-chars-modified-tick)))
	  (ignore-errors (yas-next-field))))))
#+end_src
