#+STARTIP: overview
My customized keybindings:
| Keybinding  | Command                             |
|-------------+-------------------------------------|
| M-j         | Backward word                       |
| M-k         | Forward word                        |
| C-j         | Backward char                       |
| C-k         | Forward char                        |
| C-s         | Save                                |
| C-o         | Switch window                       |
| C-w         | Backward-delete word or kill region |
| M-p         | Scroll up half page                 |
| M-n         | Scroll down half page               |
| C-f         | isearch (C-f is free)               |
| C-q         | Kill (C-k is overwritten)           |
| M-b         | Switch buffer                       |
| C-z         | Undo                                |
| C-r         | Redo                                |
| C-<0,1,2,3> | Window (instead of C-x <0,1,2,3>    |
| C-x t       | Beginning of buffer (from Stevey)   |
| C-x e       | End of buffer (from Stevey)         |
| M-c         | Copy (kill-ring-save)               |
| M-v         | Paste (yank)                        |
| M-s         | Jump within the screen              |
| C-x q       | query-replace                       |
| M-g         | Go to line                          |
| C-c c       | Copy the current line               |
| C-c d       | Duplicate the current line          |
| M-w         | Delete the current word             |
| C-x r       | Open recent file                    |
| C-x DEL     | Delete the current line             |
| M-e         | Expand region                       |
| C-x ?       | Describe key (from Linus)           |

* Avy
Use less mouse.
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :defer t
    :bind*
    ("M-s" . avy-goto-char-timer)
    :custom
    (avy-timeout-seconds 0.3)
    (avy-style 'pre)
    :custom-face
    (avy-lead-face ((t (:background "#ADD8E6" :foreground "#E0115F" :weight bold)))))
#+end_src
* Backup
Haven't found it useful. Maybe you would sleep better at night.
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq auto-save-list-file-prefix "~/.saves/.saves-")
  (setq backup-by-copying t)
  (setq delete-old-versions t
    kept-new-versions 20
    kept-old-versions 10
    version-control t)
#+end_src
* Beacon
Make switching window easier to see.
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src
* Change-inner
Vim's `i`.
#+begin_src emacs-lisp
  (use-package change-inner
    :ensure t
    :bind*
    ("M-i" . 'change-inner))
#+end_src
* Company
No LSP. Only code completion when *being asked to*.
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'company-mode)
    (delete 'company-dabbrev company-backends) ; `company-debbrev` gives odd candidates.
    ; Don't complete without being asked to!
    (setq company-idle-delay nil)
    (setq company-minimum-prefix-length 0)
    :custom
    (company-tooltip-align-annotations t)
    (company-require-match 'never)
    ;; Don't use company in the following modes.
    (company-global-modes
     '(not shell-mode eaf-mode text-mode-hook latex-mode-hook))
    ;; Trigger completion immediately.
    (company-idle-delay 0.1)
    ;; Number the candidates (use M-1, M-2 etc to select completions).
    (company-show-numbers t)
    :bind
    (:map company-mode-map
	  ("C-c C-c" . company-complete)))

  ;; Hippe expand.
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
					   try-expand-dabbrev-all-buffers
					   try-expand-dabbrev-from-kill
					   try-complete-file-name-partially
					   try-complete-file-name
					   try-expand-all-abbrevs
					   try-expand-list
					   try-expand-line
					   try-complete-lisp-symbol-partially
					   try-complete-lisp-symbol))
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
  (global-set-key (kbd "C-t") 'hippie-expand)
#+end_src
* Crux
Useful.
#+begin_src emacs-lisp
  (use-package crux
    :ensure t
    :bind*
    (("C-q" . crux-smart-kill-line)
     ("C-x <delete>" . crux-kill-whole-line)
     ("C-x DEL" . crux-kill-whole-line)
     ("C-c d" . crux-duplicate-current-line-or-region)
     ("C-c q" . crux-duplicate-and-comment-current-line-or-region)
     ("C-x 4 t" . crux-transpose-windows)
     ("C-x C-t" . crux-visit-shell-buffer)
     ("C-<return>" . crux-smart-open-line)
     ("C-RET" . crux-smart-open-line)
     ("M-<return>" . crux-smart-open-line-above)
     ("M-RET" . crux-smart-open-line-above))
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-line comment-or-uncomment-region) ; (Un)commenting works on line.
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer 'crux-rename-file-and-buffer))
#+end_src
* Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :bind*
    (("C-x C-j" . dired-jump))
    :custom
    ;; Always delete and copy recursively.
    (dired-listing-switches "-lah")
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it.
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired.
    (dired-dwim-target t)
    ;; Move files to trash when deleting.
    (delete-by-moving-to-trash t)
    ;; Load the newest version of a file.
    (load-prefer-newer t)
    ;; Detect external file changes and auto refresh file.
    (auto-revert-use-notify nil)
    ;; Auto revert every 3 sec.
    (auto-revert-interval 3)
    :config
    ;; Reuse same dired buffer, to prevent numerous buffers while navigating in
    ;; dired.
    (put 'dired-find-alternate-file 'disabled nil)
    :hook
    (dired-mode . (lambda ()
		    (local-set-key (kbd "<mouse-2>")
				   'dired-find-alternate-file)
		    (local-set-key (kbd "RET") #'dired-find-alternate-file)
		    (local-set-key (kbd "^")
				   (lambda () (interactive)
				     (find-alternate-file ".."))))))
#+end_src
* Dumb Jump
Useful to go to code definitions. Old packages that might not work in the
future. Why doesn't Emacs have better go-to-definition packages/commands? It
should be a default feature.
#+begin_src emacs-lisp
(use-package dumb-jump
  :ensure t
  :custom
  (dumb-jump-selector 'ivy)
  (xref-show-definitions-function 'xref-show-definitions-completing-read)
  :bind
  (:map prog-mode-map
    ("C-c C-o" . dumb-jump-go-other-window)
    ("C-c C-y" . dumb-jump-back))
  :config
  (add-hook 'xref-backend-functions 'dumb-jump-xref-activate))
#+end_src emacs-lisp
* Ediff
#+begin_src emacs-lisp
(use-package ediff
  :custom
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
* Expand Region
Useful in coding.
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind*
    ("M-e" . 'er/expand-region))
#+end_src
* Flycheck
Can be slow.
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :diminish
    :hook (after-init . global-flycheck-mode)
    :commands (flycheck-add-mode)
    :custom
    (flycheck-global-modes
     '(not outline-mode diff-mode shell-mode eshell-mode term-mode))
    (flycheck-emacs-lisp-load-path 'inherit)
    (flycheck-indication-mode (if (display-graphic-p)
				  'right-fringe 'right-margin))
    :bind
    (:map flycheck-mode-map
	  ("C-c p" . flycheck-previous-error)
	  ("C-c n" . flycheck-next-error))
    :init
    (add-hook 'prog-mode-hook 'flycheck-mode))
#+end_src
* Font
#+begin_src emacs-lisp
  (set-frame-font "consolas 12" nil t)

  ;; UTF-8.
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
* Goto-chg
Old package; might not work in the future. Such a basic function that should be
default.
#+begin_src emacs-lisp
  (use-package goto-chg
    :ensure t
    :bind*
    ("C-c ," . 'goto-last-change)
    ("C-c ." . 'goto-last-change-reverse))
#+end_src emacs-lisp
* Gptel
To prove I work on AI.
#+begin_src emacs-lisp
  (use-package gptel
    :ensure t
    :init
    (setq gptel-model "claude-3-5-sonnet-20241022"
	  gptel-backend (gptel-make-anthropic "Claude"
			  :stream t
			  :key (let ((key-file-path "~/.emacs.d/keys/claude.txt"))
				 (if (file-exists-p key-file-path)
				     (with-temp-buffer
				       (insert-file-contents key-file-path)
				       (string-trim (buffer-string)))
				   (message "File %s does not exist" key-file-path)))))
    (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
    (add-hook 'gptel-post-response-functions 'gptel-end-of-response)
    (add-hook 'gptel-mode-hook (lambda () (auto-fill-mode -1)))
    :config
    (define-key gptel-mode-map (kbd "C-c C-c") 'gptel-send))
#+end_src

* Highlight
#+begin_src emacs-lisp
  ;; Highlight indent.
  (use-package highlight-indent-guides
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-auto-enabled nil)
    (highlight-indent-guides-responsive 'top)
    (highlight-indent-guides-delay 0))

  ;; Highlight current word.
  (use-package symbol-overlay
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'symbol-overlay-mode))
#+end_src
* Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure t
    :init
    (use-package ibuffer-vc
      :commands (ibuffer-vc-set-filter-groups-by-vc-root)
      :custom
      (ibuffer-vc-skip-if-remote 'nil))
    :bind* ("C-x i" . 'ibuffer)
    :custom
    (ibuffer-formats
     '((mark modified read-only locked " "
	     (name 35 35 :left :elide)
	     " "
	     (size 9 -1 :right)
	     " "
	     (mode 16 16 :left :elide)
	     " " filename-and-process)
       (mark " "
	     (name 16 -1)
	     " " filename))))
#+end_src
* Isearch
Basic search.
#+begin_src emacs-lisp
  (use-package isearch
    :ensure nil
     :defer t
     :init
     (global-set-key (kbd "C-f") 'isearch-forward)
     (global-set-key (kbd "M-f") 'isearch-backward)
     (global-set-key (kbd "C-c s") 'isearch-forward-thing-at-point)
     (add-hook 'isearch-update-post-hook '(lambda () (recenter))) ; Center the screen when search. Why is this not the default?
     :bind
     (:map isearch-mode-map
		   ("C-n" . isearch-repeat-forward)
		   ("C-p" . isearch-repeat-backward)
		   ("M-v" . isearch-yank-kill)
		   ("C-w" . (lambda () (interactive) (isearch-del-char most-positive-fixnum)))))
#+end_src
* Ivy
Useful because Emacs default completion sucks.
#+begin_src emacs-lisp
  ;; https://github.com/MatthewZMD/.emacs.d?tab=readme-ov-file#ivy-amx-counsel-swiper.
  (use-package ivy
    :ensure t
    :diminish
    :init
    (use-package amx :ensure t :defer t)
    (use-package counsel :ensure t :diminish :config (counsel-mode 1))
    (ivy-mode 1)
    :bind*
    (("C-b" . ivy-switch-buffer)  ; Because C-b is freed, why not?
     ("M-b" . ivy-switch-buffer)  ; Extra binding; C-b is often needed for tmux.
     ("C-x r" . counsel-recentf)
     ("C-x C-r" . counsel-recentf)
     ("C-c C-f" . counsel-find-file)  ; Mispress.
     ("C-c g" . counsel-rg)
     ("C-y" . counsel-yank-pop)
     ("C-c i" . counsel-imenu)
     (:map ivy-minibuffer-map
	   ("M-RET" . ivy-immediate-done)
	   ("C-y" . yank)
	   ("M-v" . yank))) ; yank works in mini buffer.
    :custom
    (ivy-display-style 'fancy)
    (ivy-height 10)
    (ivy-on-del-error-function nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    (ivy-count-format "[%d/%d] ")
    (ivy-wrap t)
    ;; `counsel-M-x` prompt doesn't start with `^` to match only beginning of string.
    (ivy-initial-inputs-alist nil))
#+end_src
* Magit
Make git slightly less painful, but git is still a pain in the ass.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind*
    (("C-x g" . magit-status)
    (:map magit-status-mode-map
    ("M-RET" . magit-diff-visit-file-other-window)))
    :config
    (defun magit-log-follow-current-file ()
    "A wrapper around `magit-log-buffer-file' with `--follow' argument."
    (interactive)
    (magit-log-buffer-file t))
    (setq magit-log-arguments '("-n256" "--graph" "--decorate" "--color")
    ;; Show diff per word.
    magit-diff-refine-hunk t))

  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (add-hook 'prog-mode-hook 'diff-hl-mode)
    :bind
    (:map diff-hl-mode-map ("<left-fringe> <mouse-1>" . diff-hl-diff-goto-hunk))
    :hook
    ((magit-post-refresh . diff-hl-magit-post-refresh)
     (after-init . global-diff-hl-mode)
     (dired-mode . diff-hl-dired-mode)))
#+end_src emacs-lisp
* Marginalia
Should be Emacs default.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'left)
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
* Multi-cursor
Useful but can waste time to show off (though even temptation is greater in
keyboard macros).
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind*
    ("C-c <return>" . 'mc/edit-lines)
    ("C-c RET" . 'mc/edit-lines))
#+end_src
* Mwim
Quite useful. Agreed by Stevey.
#+begin_src emacs-lisp
  (use-package mwim
    :ensure t
    :init
    (global-set-key (kbd "C-a") 'mwim-beginning)
    (global-set-key (kbd "C-e") 'mwim-end))
#+end_src
* Org
Org mode is great as long as you don't spend your life on it.
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :defer t
    :bind
    (:map org-mode-map
	  ;; Don't know why tab doesn't fold/unfold heading if using
	  ;; `use-package` to config org setting (it works if org
	  ;; setting is config without `use-package`).
	  ("TAB" . org-cycle))
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (python . t)))
    :custom
    (org-src-tab-acts-natively t)      ; Make tab work in Org-mode code block.
    (org-src-fontify-natively t)       ; Highlight code block.
    (org-confirm-babel-evaluate 'nil)  ; Don't ask when running code.
    :init
    (add-hook 'org-mode-hook 'visual-line-mode))
#+end_src
* Parens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :bind
    (:map smartparens-mode-map
	  ("C-M-f" . sp-forward-sexp)
	  ("C-M-b" . sp-backward-sexp))
    :custom
    (sp-escape-quotes-after-insert nil)
    (sp-autoinsert-pair nil) ; Don't auto-insert paired delimiters.
    :config
    ;; Stop pairing single quotes in elisp.
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))

  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
* Prog
** Tree-sitter
Newly supported. Can be buggy.
#+begin_src emacs-lisp
  (use-package treesit
    :ensure nil
    :init
    (setq treesit-language-source-alist
	  '((bash "https://github.com/tree-sitter/tree-sitter-bash")
	    (cmake "https://github.com/uyha/tree-sitter-cmake")
	    (css "https://github.com/tree-sitter/tree-sitter-css")
	    (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	    (go "https://github.com/tree-sitter/tree-sitter-go")
	    (html "https://github.com/tree-sitter/tree-sitter-html")
	    (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	    (json "https://github.com/tree-sitter/tree-sitter-json")
	    (make "https://github.com/alemuller/tree-sitter-make")
	    (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	    (python "https://github.com/tree-sitter/tree-sitter-python")
	    (toml "https://github.com/tree-sitter/tree-sitter-toml")
	    (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	    (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	    (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
    ;; Hacky. https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
    (setq major-mode-remap-alist
	  '((yaml-mode . yaml-ts-mode)
	    (bash-mode . bash-ts-mode)
	    (js2-mode . js-ts-mode)
	    (typescript-mode . typescript-ts-mode)
	    (json-mode . json-ts-mode)
	    (css-mode . css-ts-mode)
	    (python-mode . python-ts-mode)))
    :bind*
    ("C-c l ," . treesit-beginning-of-defun)
    ("C-c l ." . treesit-end-of-defun))
#+end_src

** Formatter
#+begin_src emacs-lisp
(use-package apheleia
  :ensure t
  :bind* ("C-c l f" . apheleia-format-buffer)
  :config
  (setf (alist-get 'python-ts-mode apheleia-mode-alist) '(isort black)))
#+end_src

** Python
#+begin_src emacs-lisp
  (use-package python-mode
    :ensure nil
    :after flycheck
    :mode "\\.py\\'"
    :custom
    (python-indent-offset 4)
    (flycheck-python-pycompile-executable "/usr/local/bin/python3")
    (python-shell-interpreter "/usr/local/bin/python3")
    (py-python-command "/usr/local/bin/python3")
    (python-shell-interpreter "/usr/local/bin/python3")
    (python-indent-guess-indent-offset-verbose nil))
#+end_src
* Recentf
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :custom
    (recentf-auto-cleanup "05:00am")
    (recentf-max-saved-items 200)
    (recentf-exclude '((expand-file-name package-user-dir)
		       ".cache"
		       ".cask"
		       ".elfeed"
		       "bookmarks"
		       "cache"
		       "ido.*"
		       "persp-confs"
		       "recentf"
		       "undo-tree-hist"
		       "url"
		       "COMMIT_EDITMSG\\'")))

  ;; When buffer is closed, saves the cursor location.
  (save-place-mode 1)

  ;; Set history-length longer.
  (setq-default history-length 1000)
#+end_src
* Scroll
#+begin_src emacs-lisp
  ;; Scroll window up/down by half window. Default Emacs scolling sucks.
  (use-package view
    :ensure nil
    :init
    (bind-key* "C-<down>" 'View-scroll-half-page-forward)
    (bind-key* "C-<up>" 'View-scroll-half-page-backward)
    (bind-key* "M-n" 'View-scroll-half-page-forward)
    (bind-key* "M-p" 'View-scroll-half-page-backward))

  ;; Vertical Scroll.
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 100000)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)

  ;; Horizontal Scroll.
  (setq hscroll-step 1)
  (setq hscroll-margin 1)
  (setq scroll-preserve-screen-position t)

  ;; Click and scroll in terminal.
  (unless (display-graphic-p)
    (xterm-mouse-mode 1) ; Activate mouse-based scrolling.
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))
#+end_src
* Shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns x))
    :init
    (setq explicit-shell-file-name "/bin/zsh")
    :config
    (exec-path-from-shell-initialize))

  (use-package term
    :ensure nil
    :bind
    (:map term-raw-map
	  ("C-y" . term-paste)
	  ("M-v" . term-paste)
          ("C-o" . other-window)))
#+end_src
* Spell Checker
Still need.
#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :diminish
    :if (executable-find "hunspell")
    :hook (((text-mode outline-mode
	     latex-mode org-mode markdown-mode) . flyspell-mode))
    :init
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    :custom
    (flyspell-issue-message-flag nil)
    (ispell-program-name "/usr/local/bin/hunspell")
    (ispell-hunspell-dict-paths-alist
      '(("en_US" "/Applications/dict-en-20230701_lo/en_US.aff")))
    (ispell-local-dictionary "en_US")
    (ispell-local-dictionary-alist
    ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters
    ;; passed to hunspell. You could use `("-d" "en_US,en_US-med")` to check
    ;; with multiple dictionaries.
    '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
    :config
    (use-package flyspell-correct-ivy
      :after ivy
      :ensure t
      :bind
      (:map flyspell-mode-map
	    ([remap flyspell-correct-word-before-point] .
	      flyspell-correct-wrapper)
	    ("M-m" . flyspell-correct-wrapper))
      :custom (flyspell-correct-interface 'flyspell-correct-ivy)))
#+end_src
* Super-save
Make the paranoid sleep better.
#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (super-save-mode +1))
#+end_src
* TeX
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.tex\\'" . LaTeX-mode))
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'tex-mode-hook 'visual-line-mode))
#+end_src
* Theme
Finetuned Zenburn theme.
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    (setq zenburn-override-colors-alist
	  ;; Make main background lighter.
	  '(("zenburn-bg" . "#494949")
	    ;; Make main text light gold. Color borrowed from Jon Blow.
	    ("zenburn-fg"  . "#CBB390")
	    ;; Set original orange and yellow to dark rose and green since they conflict
	    ;; with the main text.
	    ("zenburn-orange" . "#CC9999")
	    ("zenburn-yellow" . "#8FB28F")))
    (load-theme 'zenburn t)
    (set-cursor-color "#F0F0F0")
    (set-face-attribute 'region nil :background "#666666")
    ;; Search.
    (set-face-attribute 'isearch nil :background "#ADD8E6" :foreground "#E0115F")
    (set-face-attribute 'lazy-highlight nil :foreground "#E0115F")
    ;; Indent highlight color.
    (set-face-background 'highlight-indent-guides-odd-face "darkgray")
    (set-face-background 'highlight-indent-guides-even-face "dimgray")
    (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
    ;; Mode line.
    (set-face-attribute 'mode-line-buffer-id nil :foreground "#327232" :underline)
    (set-face-attribute 'mode-line-inactive nil :foreground "gray40" :box nil)
    (set-face-attribute 'mode-line nil
			:foreground "#062329"
			:background "#CBB390"
			:box nil)
    ;; Mini buffer current highlighted line color.
    (custom-set-faces '(ivy-current-match ((t (:background "#333333")))))
    ;; Paren matching color.
    (set-face-attribute 'show-paren-match nil :foreground "#E0115F" :background "#CCCCCC"))
#+end_src
* Undo Tree
Emacs default undo/redo sucks.
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :defer t
    :init
    (global-undo-tree-mode)
    :bind*
    (("C-z" . 'undo-tree-undo)
     ("M-z" . 'undo-tree-undo) ; Emulate the normal cmd-z.
     ("C-r" . 'undo-tree-redo)
     ("M-r" . 'undo-tree-redo))
    :custom
    (undo-tree-visualizer-diff t)
    (undo-tree-history-directory-alist
     `(("." . ,(expand-file-name ".backup" user-emacs-directory))))
    (undo-tree-visualizer-timestamps t))
#+end_src
* Whitespace
Be tidy please.
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'whitespace-mode)
    (add-hook 'latex-mode-hook 'whitespace-mode)
    (remove-hook 'before-save-hook 'delete-trailing-whitespace)
    :custom
    (whitespace-line-column nil)
    (show-trailing-whitespace t)
    (whitespace-style
     '(face
       ;; tabs spaces trailing space-before-tab space-after-tab
       tabs trailing space-before-tab space-after-tab
       tab-mark)))
#+end_src
* Winner
Restore previous window layouts.
#+begin_src emacs-lisp
(use-package winner
  :ensure t
  :init
  (winner-mode 1)
  :custom
  (winner-boring-buffers
   '("*Completions*"
     "*Compile-Log*"
     "*inferior-lisp*"
     "*Fuzzy Completions*"
     "*Apropos*"
     "*Help*"
     "*cvs*"
     "*Buffer List*"
     "*Ibuffer*"
     "*esh command on file*")))
#+end_src
* My/Disable Useless Things
Why does Emacs put those by default?
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-major-mode 'text-mode)
  (setq inhibit-startup-message t)
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
  (menu-bar-mode -1)
  (setq-default visible-bell t)
  (blink-cursor-mode 0)
  (setq ns-use-proxy-icon nil) ; Icon of filetype.
  (setq initial-scratch-message "")

  ;; Useless keys that are easier to mispress.
  (global-unset-key (kbd "C-x C-b"))  ; Original: buffer list.
  (global-unset-key (kbd "C-v"))
  (global-unset-key (kbd "M-h"))
  (global-unset-key (kbd "C-x k"))    ; Use `C-x K`.
  (global-unset-key (kbd "C-x C-m"))
  (global-unset-key (kbd "C-x m"))
  (global-unset-key (kbd "C-x C-z"))
  (global-unset-key (kbd "C-x C-u"))
  (global-unset-key (kbd "C-x C-l"))
  (global-unset-key (kbd "C-x C-x"))
  (global-unset-key (kbd "C-x C-s"))  ; Use `C-s`.
#+end_src
* My/Functions
#+begin_src emacs-lisp
  ;; Backward kill word or the region if selected.
  (defun my/backward-kill-word-or-region ()
    "Kill a word backward or the region if selected."
    (interactive)
    (if (region-active-p)
	(kill-region (region-beginning) (region-end))
      (backward-kill-word 1)))

  (bind-key* "C-w" 'my/backward-kill-word-or-region)

  ;; When splitting window, automatically balance them and switch focus to the
  ;; newly splitted window.
  (bind-key* "C-x 2"
	     (lambda ()
	       (interactive)
	       (split-window-vertically)
	       (balance-windows)
	       (other-window 1)))
  (bind-key* "C-x 3"
	     (lambda ()
	       (interactive)
	       (split-window-horizontally)
	       (balance-windows)
	       (other-window 1)))

  ;; Auto-balance window when deleting window.
  (bind-key* "C-x 0"
	     (lambda ()
	       (interactive)
	       (delete-window)
	       (balance-windows)))

  ;; Simplify. Doesn't work in terminal.
  (define-key key-translation-map (kbd "C-0") (kbd "C-x 0"))
  (define-key key-translation-map (kbd "C-1") (kbd "C-x 1"))
  (define-key key-translation-map (kbd "C-2") (kbd "C-x 2"))
  (define-key key-translation-map (kbd "C-3") (kbd "C-x 3"))

  ;; Toggle column goal.
  (defun my/toggle-goal-column ()
    "Toggle goal column mode."
    (interactive)
    (if goal-column
	(progn
	  (setq goal-column nil)
	  (message "Unset goal column"))
      (progn
	(setq goal-column (current-column))
	(message "Set goal column at %d" goal-column))))

  (bind-key* "C-x C-u" 'my/toggle-goal-column)

  ;; Reload init files.
  (defun my/reload-init-file ()
    (interactive)
    (load-file user-init-file))

  ;; Save all buffers.
  (defun my/save-all-buffers ()
    "Instead of `save-buffer', save all opened buffers by calling
		     `save-some-buffers' with ARG t."
    (interactive)
    (save-some-buffers t))

  (bind-key* "C-s" 'my/save-all-buffers)

  ;; Mark until a char. A general version of `Zap-up-to-char`.
  (defun my/mark-until-char ()
    "Mark text from current cursor position until the first occurrence
		  of a prompted character."
    (interactive)
    (let ((prompt (read-char "Enter the character: ")))
      (save-excursion
	(search-forward (string prompt) nil t)
	(set-mark (point))
	(goto-char (1- (point)))
	(exchange-point-and-mark))))

  (bind-key* "M-t" 'my/mark-until-char)

  ;; Backward kill line.
  (defun my/backward-kill-line ()
    (interactive)
    (kill-line 0)
    (indent-according-to-mode))

  (bind-key* "C-<backspace>" 'my/backward-kill-line) ; Doesn't work in terminal.

  ;; Edit this file.
  (defun my/edit-configs ()
    "Opens this file."
    (interactive)
    (find-file "~/.emacs.d/myinit.org"))

  ;; Show buffer's file path.
  (defun my/show-file-path ()
    "Show the full path of the file in the minibuffer."
    (interactive)
    (message (buffer-file-name)))

  ;; Kill a word when the cursor is in the middle.
  (defun my/kill-word-at-point ()
    "Kill the word at the current cursor position."
    (interactive)
    (let ((bounds (bounds-of-thing-at-point 'symbol)))
      (when bounds
	(kill-region (car bounds) (cdr bounds)))))

  (bind-key* "M-w" 'my/kill-word-at-point)

  ;; Stolen from Stevey.
  (defun my/rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
	  (filename (buffer-file-name)))
      (if (not filename)
	  (message "Buffer '%s' is not visiting a file!" name)
	(if (get-buffer new-name)
	    (message "A buffer named '%s' already exists!" new-name)
	  (progn
	    (rename-file filename new-name 1)
	    (rename-buffer new-name)
	    (set-visited-file-name new-name)
	    (set-buffer-modified-p nil))))))

  (defun my/move-buffer-file (dir)
    "Moves both current buffer and file it's visiting to DIR."
    (interactive "DNew directory: ")
    (let* ((name (buffer-name))
	   (filename (buffer-file-name))
	   (dir
	    (if (string-match dir "\\(?:/\\|\\\\)$")
		(substring dir 0 -1) dir))
	   (newname (concat dir "/" name)))
      (if (not filename)
	  (message "Buffer '%s' is not visiting a file!" name)
	(progn
	  (copy-file filename newname 1)
	  (delete-file filename)
	  (set-visited-file-name newname)
	  (set-buffer-modified-p nil)  t))))

  ;; Delete this file.
  (defun my/delete-this-file ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if filename
	  (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
	      (progn
		(delete-file filename)
		(message "Deleted file %s." filename)
		(kill-buffer)))
	(message "Not a file visiting buffer!"))))


  ;; Unfill paragraph and region. Why aren't they built-in?
  (defun my/unfill-paragraph ()
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))

  (defun my/unfill-region ()
    (interactive)
    (let ((fill-column (point-max)))
      (fill-region (region-beginning) (region-end) nil)))

  ;; C-a and C-e jump to visual line in visual-line-mode.
  (defun my/visual-line-mode-hook ()
    (define-key visual-line-mode-map (kbd "C-a") 'beginning-of-visual-line)
    (define-key visual-line-mode-map (kbd "C-e") 'end-of-visual-line))

  (add-hook 'visual-line-mode-hook 'my/visual-line-mode-hook)

  ;; Simplify local mark ring set and jump.
  (defun my/mark-location ()
    "Pushes `point' to `mark-ring' and does not activate the region
	Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
    (interactive)
    (push-mark (point) t nil)
    (message "Pushed mark to ring"))

  (bind-key* "C-c m" 'my/mark-location)

  (defun my/return-to-mark ()
    "Jumps to the local mark, respecting the `mark-ring' order.
     This is the same as using \\[set-mark-command] with the prefix argument."
    (interactive)
    (set-mark-command 1)
    (message "Jumped to mark"))

  (bind-key* "C-c r" 'my/return-to-mark)

  ;; Python indent.
  (defun my/python-tab (&optional arg)
    "Indent selected text or the current line."
    (interactive "*P")
    (if (use-region-p)
	(save-excursion
	  (let* ((beg (region-beginning))
		 (end (region-end))
		 (beg-line (progn (goto-char beg)
				  (line-beginning-position)))
		 (end-line (progn (goto-char end) (line-end-position))))
	    (python-indent-shift-right beg-line end-line arg)))
      (indent-for-tab-command arg)))

  (defun my/python-backtab (&optional arg)
    "Dedent selected text or the current line."
    (interactive "*P")
    (if (use-region-p)
	(save-excursion (let* ((beg (region-beginning))
			       (end (region-end))
			       (beg-line (progn (goto-char beg)
						(line-beginning-position)))
			       (end-line (progn (goto-char end) (line-end-position))))
			  (python-indent-shift-left beg-line end-line arg)))
      (python-indent-shift-left (line-beginning-position) (line-end-position) arg)))

  (defun my/copy-line-to-clipboard ()
    "Copy the current line to the macOS clipboard."
    (interactive)
    (let ((line (buffer-substring (line-beginning-position) (line-end-position))))
      (kill-new line)
      (shell-command (concat "echo " (shell-quote-argument line) " | pbcopy"))))

  (bind-key* "C-c c" 'my/copy-line-to-clipboard)

  (define-key python-mode-map (kbd "TAB") 'my/python-tab)
  (define-key python-ts-mode-map (kbd "TAB") 'my/python-tab)
  (define-key python-mode-map (kbd "<tab>") 'my/python-tab)
  (define-key python-ts-mode-map (kbd "<tab>") 'my/python-tab)
  (define-key python-mode-map (kbd "<backtab>") 'my/python-backtab)
  (define-key python-ts-mode-map (kbd "<backtab>") 'my/python-backtab)
#+end_src
* My/Keybindings
#+begin_src emacs-lisp
  ;; Stevey's suggestion.
  (bind-key* "C-x t" 'beginning-of-buffer)
  (bind-key* "C-c t" 'beginning-of-buffer) ; Mispress.
  (bind-key* "C-x e" 'end-of-buffer)
  (bind-key* "C-c e" 'end-of-buffer)       ; Mispress.

  ;; Conventional copy/paste.
  (bind-key* "M-c" 'kill-ring-save)
  (bind-key* "M-v" 'yank)

  ;; Default word and char movement are always awkward to me.
  (bind-key* "M-j" 'backward-word)
  (bind-key* "M-k" 'forward-word)
  (bind-key* "C-j" 'backward-char)
  (bind-key* "C-k" 'forward-char)

  ;; Adjust font size like web browsers. Doesn't work in terminal.
  (bind-key* "C-=" 'text-scale-increase)
  (bind-key* "C--" 'text-scale-decrease)

  ;; Cure bad habits.
  (bind-key* "C-x C-s" (lambda ()
			  (interactive)
			  (message "Use C-s, dude.")))

  ;; Somehow those two packages aren't installed automatically by `use-package`.
  ;; Need to install them manually first. And then bind them here. And you can't do
  ;; `eval-after-load` for some reason.
  (bind-key* "C-c C-o" 'dumb-jump-go-other-window)
  (bind-key* "C-c C-y" 'dumb-jump-back)
  (bind-key* "C-c ," 'goto-last-change)
  (bind-key* "C-c ." 'goto-last-change-reverse)

  ;; Misc.
  (bind-key* "C-o" 'other-window)
  (bind-key* "M-g" 'goto-line)
  (bind-key* "C-c DEL" 'delete-blank-lines)
  (bind-key* "C-c <delete>" 'delete-blank-lines)
  (bind-key* "C-x K" 'kill-this-buffer) ; Don't ask.
  (bind-key* "C-c w" 'toggle-truncate-lines) ; Wrap.
  (bind-key* "C-x q" 'query-replace)
  (bind-key* "C-x \\" 'sort-lines)
  (bind-key* "C-x ?" 'describe-key)
  (bind-key* "C-x c" 'call-last-kbd-macro)
  ;; Bind extra keys to common commands.
  (define-key key-translation-map (kbd "C-;") (kbd "C-l"))
  (bind-key* "M-l" 'recenter-top-bottom)
  (bind-key* "M-o" 'other-window)
  ;; Can't turn them to bind-key*; otherwise undo-tree-mode wouldn't enable. Strange.
  (global-set-key (kbd "M-;") 'comment-or-uncomment-region)
  (global-set-key (kbd "C-/") 'comment-or-uncomment-region)

  ;; Aliases.
  (defalias 'rl  'my/reload-init-file)
  (defalias 'cf  'my/edit-configs)
  (defalias 'vce 'vc-ediff)
  (defalias 'rc  'recompile)
  (defalias 'rs  'replace-string)
#+end_src
* My/OS
Handle copy/paste in OSX.
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (defun my/copy-from-osx ()
      "Handle copy/paste intelligently on osx."
      (let ((pbpaste (purecopy "/usr/bin/pbpaste")))
	(if (and (eq system-type 'darwin)
		 (file-exists-p pbpaste))
	      (let ((tramp-mode nil)
		    (default-directory "~"))
		(shell-command-to-string pbpaste)))))

    (defun my/paste-to-osx (text &optional push)
      (let ((process-connection-type nil))
	(let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	  (process-send-string proc text)
	  (process-send-eof proc))))

    (setq interprogram-cut-function 'my/paste-to-osx
	  interprogram-paste-function 'my/copy-from-osx))
#+end_src
* My/Configs
#+begin_src emacs-lisp
  ;; C-p, C-n, etc uses visual lines.
  (setq line-move-visual t)

  ;; y or n.
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Ask before killing emacs.
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; No dialgue!
  (setq use-dialog-box nil)

  ;; Move the backup fies to user-emacs-directory/.backup.
  (setq backup-directory-alist
	`(("." . ,(expand-file-name ".backup" user-emacs-directory))))

  ;; Automatically kill all active processes when closing Emacs.
  (setq confirm-kill-processes nil)

  ;; Turn Off Cursor Alarms.
  (setq ring-bell-function 'ignore)

  ;; Show Keystrokes in Progress Instantly.
  (setq echo-keystrokes 0.1)

  ;; Don't Lock Files.
  (setq-default create-lockfiles nil)

  ;; ad-handle-definition warnings are generated when functions are
  ;; redefined with `defadvice', they are not helpful.
  (setq ad-redefinition-action 'accept)

  ;; Move Custom-Set-Variables to Different File.
  (setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
  (load custom-file 'noerror 'nomessage)

  ;; So Long mitigates slowness due to extremely long lines.
  ;; Currently available in Emacs master branch *only*!
  (when (fboundp 'global-so-long-mode)
    (global-so-long-mode))

  ;; Add a newline automatically at the end of the file upon save.
  (setq require-final-newline t)

  ;; Enable `erase-buffer' function.
  (put 'erase-buffer 'disabled nil)

  ;; Smart tab behavior: indent or complete.
  (setq tab-always-indent 'complete)

  ;; Prevent down-arrow from adding empty lines to the bottom of the buffer.
  (setq next-line-add-newlines nil)

  ;; Don't show line numbers.
  (column-number-mode 1)

  ;; Save whatever’s in the current system clipboard before replacing it with
  ;; the Emacs' text.
  (setq save-interprogram-paste-before-kill t)

  ;; Stop ivy from displaying recentf files.
  (setq ivy-use-virtual-buffers nil)

  ;; Width to wrap lines for `fill-paragraph` and `fill-region`.
  (setq-default fill-column 80)
  ;; (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
  ;; (add-hook 'tex-mode-hook 'auto-fill-mode)
  ;; (add-hook 'text-mode-hook 'auto-fill-mode)
  ;; (add-hook 'org-mode-hook 'auto-fill-mode)

  ;; Visual line don't break the word.
  (setq-default word-wrap t)

  ;; Paren match.
  (add-hook 'prog-mode-hook 'show-paren-mode)

  ;; Automatically update a buffer if a file changes on disk.
  (global-auto-revert-mode 1)
  (add-hook 'dired-mode-hook 'auto-revert-mode) ; Refresh dired too.

  ;; Give context to cursor.
  (setq scroll-margin 4)

  ;; Show unfinished keystrokes early.
  (setq echo-keystrokes 0.1)

  ;; Don't show useless things in mode line.
  (setq display-time-format "[%m-%d (%a) %H:%M]")
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (setq display-time-mail-string "")
  (display-time-mode 1)
  (setq-default mode-line-format
		(list
		 "  "                  ; Don't understand why Emacs puts "-" here.
		 'mode-line-modified
		 "  "
		 'mode-line-buffer-identification
		 "  (%l, %c)  "        ; Buffer name  (line number, column number).
		 'display-time-string  ; Time.
		 "  Focus!"))          ; Of course.

  ;; Don't ask when killing a buffer with a live process.
  (setq kill-buffer-query-functions
	(remq 'process-kill-buffer-query-function
	      kill-buffer-query-functions))

  ;; Tramp.
  (setq tramp-default-method "ssh")

  ;; Uses system trash rather than deleting forever.
  (setq trash-directory "~/.Trash")
  (setq delete-by-moving-to-trash t)

  ;; Compilation.
  (setq-default compilation-always-kill t)
  (setq-default compilation-ask-about-save nil)
  (setq-default compilation-scroll-output t)

  ;; Move `custom-set-variables` to a different file.
  (setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
  (load custom-file 'noerror)

  ;; Switch to help buffers automatically.
  (setq help-window-select t)

  ;; Reduce a little typing latency.
  (setq redisplay-dont-pause t)

  ;; Electric indent.
  (add-hook 'prog-mode-hook 'electric-indent-mode)
  ;; Cause annoying auto indent in org mode.
  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode 0)))

  ;; Warn only when opening files bigger than 100MB.
  (setq large-file-warning-threshold 100000000)

  ;; Frame title shows either a file or a buffer name
  ;; (if the buffer isn't visiting a file)
  (setq frame-title-format
	'((:eval (if (buffer-file-name)
		     (abbreviate-file-name (buffer-file-name))
		   "%b"))))

  ;; Set frame size and position.
  (when (display-graphic-p)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

  ;; Treat selected region like a normal region in other systems.
  (delete-selection-mode t)

  ;; Savehist.
  (setq history-length 100)
  (savehist-mode 1)

  ;; Column width indicator.
  (setq-default display-fill-column-indicator-column 79) ; 80 linewidth
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)

  ;; https://martinfowler.com/articles/2023-xref-problem.html.
  (setq dumb-jump-force-searcher 'rg)

  ;; Sticky function head.
  (use-package semantic
    :ensure nil
    :hook
    (prog-mode . semantic-mode)
    (prog-mode . global-semantic-stickyfunc-mode))

  ;; Default some files to text-mode.
  (add-to-list 'auto-mode-alist '("\\.in\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.out\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.args\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.bb\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.bbclass\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . markdown-mode))

  ;; Mark ring.
  ;; Decrease saving ring so that jump more efficiently.
  (setq mark-ring-max 6)
  (setq global-mark-ring-max 8)

  ;; C-u C-SPC and C-x C-SPC repeats with C-SPC after the first press.
  (setq-default set-mark-command-repeat-pop t)
#+end_src
